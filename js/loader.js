// Generated by CoffeeScript 1.3.3

/*
TODO: use full file path instead of subf - is subf by itself ever really needed?
TODO: see if we can do without blabLocation, if we have org/repo name in resources.json.
*/


/*
TODO: if localhost, try loading resource locally first.  if fails, from github.
support {css: "..."} in resources.coffee
loadJSON broken - Resource.load no longer supports type?

TODO: have local env file so we know whether to try loading locally (localhost or deployed host)?
TODO: for deployed host, may also need to know root folder?
*/


(function() {
  var BlabResourceLocation, CoffeeResource, CssResourceInline, CssResourceLinked, EditorContainer, EvalContainer, GitHub, GitHubApi, GitHubApiResourceLocation, HtmlResource, JsResourceInline, JsResourceLinked, JsonResource, Loader, OLD_Blab, OLD_Loader, OLD_ResourceLocation, OLD___BlabLocation, Resource, ResourceContainers, ResourceFactory, ResourceInline, ResourceLocation, Resources, URL, WebResourceLocation, ready, render, resourceLocation, resources, testBlabLocation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  console.log("LOADER");

  Loader = (function() {
    /*
        # TODO:
        [
            "main.html",
            "style.css",
            "bar.js",
            "foo.coffee",
            "main.coffee",
            "/some-repo/snippet.html",
            "/other-repo/foo.css",
            "/puzlet/js/d3.min.js",
            "http://domain.com/script.js",
            "/ode-fixed/ode.coffee"
        ]
    */

    Loader.prototype.htmlResources = window.blabBasic ? [
      {
        url: ""
      }
    ] : [
      {
        url: "/puzlet/puzlet/css/coffeelab.css"
      }, {
        url: "//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/smoothness/jquery-ui.css",
        "var": "jQuery"
      }
    ];

    Loader.prototype.scriptResources = [
      {
        url: "/puzlet/puzlet/js/acorn.js"
      }, {
        url: "/puzlet/puzlet/js/numeric-1.2.6.js"
      }, {
        url: "/puzlet/puzlet/js/jquery.flot.min.js"
      }, {
        url: "/puzlet/puzlet/js/compile.js"
      }, {
        url: "/puzlet/puzlet/js/jquery.cookie.js"
      }, {
        url: "//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js",
        "var": "jQuery.ui"
      }
    ];

    function Loader(render, done) {
      var _this = this;
      this.render = render;
      this.done = done;
      this.resources = $blab.resources;
      this.resources.init({
        preload: function(callback) {
          return _this.loadCssAndScripts(callback);
        },
        postload: function(callback) {
          return _this.done();
        }
      });
    }

    Loader.prototype.TO_ADD_loadGitHub = function(callback) {
      this.github = new GitHub(this.resources);
      return this.github.loadGist(callback);
    };

    Loader.prototype.loadCssAndScripts = function(callback) {
      var _this = this;
      this.resources.add(this.htmlResources);
      this.resources.add(this.scriptResources);
      return this.resources.loadUnloaded(function() {
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadAce = function(callback) {
      var load,
        _this = this;
      load = function(resources, callback) {
        _this.resources.add(resources);
        return _this.resources.load(["js", "css"], function() {
          return typeof callback === "function" ? callback() : void 0;
        });
      };
      return new Ace.Resources(load, function() {
        _this.resources.render();
        _this.resources.compileCoffee(function(coffee) {
          return coffee.hasEval();
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    return Loader;

  })();

  /*
  *******SPECIFICATION*******
          
  ===Supported URLs for current blab location===
  http://localhost:port/owner/repo (note: repo could be owner.github.io)
  http://puzlet.org
  http://puzlet.org/repo
  http://owner.github.io
  http://owner.github.io/repo
  (We could also support subfolders)
  TODO: should work on any domain (http://domain.com/path/to/owner[/repo]), if blabs deployed there.
  
  From these, we derive:
  owner, repo names of current page (index.html).
  
  ===For resources.coffee, support these URLs===
  
  File extension affects whether resource is linked or inlined.
  JS/CSS files are linked (not inlined), unless they come from current blab (then they are inlined).
  All other file types are loaded via Ajax (if possible), and inlined.  Use GitHub API if foreign.  IE issue here.
  TODO: Also need {css/js: generalUrl}.
  
  ---General URLs---
  Must begin with http:// or //
  (No special interpretation of owner/repo.)
  
  http://general.com/path/to/file.ext (general URL)
  http://puzlet.org/repo/path/to/file.ext
  http://owner.github.io/repo/path/to/file.ext
  http://rawgit ...
  
  GitHub API link.  This needs to be used for foreign github JS/CSS resources
  that can't be accessed via github.io.
  This does not work with IE, and so it may be better to copy such resource to location in same org,
  so it is accessible locally or via github.io.
  http://api.github.com/...
  
  ---Special resource identifiers---
  Load locally if localhost (TODO: or deployment domain) and file available; otherwise get from github.
  
  /owner/repo/path/to/file.ext 
  path/to/file.ext (use current page's host owner/repo)
  */


  URL = (function() {

    function URL(url) {
      var match;
      this.url = url;
      this.a = document.createElement("a");
      this.a.href = this.url;
      this.hostname = this.a.hostname;
      this.pathname = this.a.pathname;
      this.search = this.a.search;
      this.host = this.hostname.split(".");
      this.path = this.pathname ? this.pathname.split("/").slice(1) : [];
      this.hasPath = this.path.length > 0;
      match = this.hasPath ? this.pathname.match(/\.[0-9a-z]+$/i) : null;
      this.fileExt = (match != null ? match.length : void 0) ? match[0].slice(1) : null;
      this.file = this.fileExt ? this.path.slice(-1)[0] : null;
    }

    URL.prototype.onWeb = function() {
      var w,
        _this = this;
      w = function(url) {
        return _this.url.indexOf(url) === 0;
      };
      return w("http://") || w("https://") || w("//");
    };

    URL.prototype.filePath = function() {
      var base;
      base = new URL(".");
      return this.pathname.replace(base.pathname, "");
    };

    URL.prototype.subfolder = function(filePathIdx) {
      var endIdx, s;
      endIdx = this.file ? -2 : -1;
      s = this.path.slice(filePathIdx, endIdx + 1 || 9e9).join("/");
      if (s) {
        return "/" + s;
      } else {
        return "";
      }
    };

    return URL;

  })();

  ResourceLocation = (function(_super) {

    __extends(ResourceLocation, _super);

    ResourceLocation.prototype.owner = null;

    ResourceLocation.prototype.repo = null;

    ResourceLocation.prototype.filepath = null;

    ResourceLocation.prototype.inBlab = false;

    ResourceLocation.prototype.source = null;

    ResourceLocation.prototype.gitHub = null;

    function ResourceLocation(url) {
      this.url = url;
      ResourceLocation.__super__.constructor.call(this, this.url);
      this.source = this.url;
      this.loadUrl = this.url;
    }

    ResourceLocation.prototype.load = function(callback) {
      var url;
      url = this.url + ("?t=" + (Date.now()));
      console.log("LOAD " + url);
      return $.get(url, (function(data) {
        return callback(data);
      }), "text");
    };

    return ResourceLocation;

  })(URL);

  WebResourceLocation = (function(_super) {

    __extends(WebResourceLocation, _super);

    function WebResourceLocation() {
      return WebResourceLocation.__super__.constructor.apply(this, arguments);
    }

    WebResourceLocation.prototype.loadType = "ext";

    WebResourceLocation.prototype.cache = true;

    return WebResourceLocation;

  })(ResourceLocation);

  BlabResourceLocation = (function(_super) {

    __extends(BlabResourceLocation, _super);

    BlabResourceLocation.prototype.localOrgPath = null;

    BlabResourceLocation.prototype.loadType = null;

    BlabResourceLocation.prototype.cache = null;

    function BlabResourceLocation(url) {
      var path, _ref, _ref1, _ref2;
      this.url = url;
      BlabResourceLocation.__super__.constructor.call(this, this.url);
      this.blabOwner = $blab.gitHub.owner;
      this.blabRepo = $blab.gitHub.repo;
      if (this.fullPath()) {
        this.owner = this.path[0];
        this.repo = this.path[1];
        this.filepath = this.path.slice(2).join("/");
        this.inBlab = this.owner === this.blabOwner && this.repo === this.blabRepo;
      } else {
        this.owner = this.blabOwner;
        this.repo = this.blabRepo;
        this.filepath = this.filePath();
        this.inBlab = true;
      }
      this.localOrgPath = (_ref = $blab.gitHub) != null ? (_ref1 = _ref.localConfig) != null ? (_ref2 = _ref1.orgs) != null ? _ref2[this.owner] : void 0 : void 0 : void 0;
      path = this.filepath;
      this.gitHub = new GitHub({
        owner: this.owner,
        repo: this.repo,
        path: path
      });
      if (this.inBlab) {
        this.loadUrl = this.filepath;
      } else {
        this.loadUrl = this.localOrgPath ? "" + this.localOrgPath + "/" + this.repo + "/" + this.filepath : this.gitHub.linkedUrl();
      }
      this.loadType = this.inBlab ? "blab" : "ext";
      this.cache = !this.inBlab && this.owner === "puzlet";
      console.log(this.owner, this.repo, this.filepath, this.loadUrl);
      console.log(this.gitHub.linkedUrl());
      this.source = this.gitHub.sourcePageUrl();
    }

    BlabResourceLocation.prototype.load = function(callback) {
      var url;
      console.log("Blab load " + this.url + " => " + this.loadUrl);
      url = this.loadUrl + ("?t=" + (Date.now()));
      return $.get(url, (function(data) {
        return callback(data);
      }), "text");
    };

    BlabResourceLocation.prototype.fullPath = function() {
      var _ref;
      return ((_ref = this.url) != null ? _ref.indexOf("/") : void 0) === 0;
    };

    return BlabResourceLocation;

  })(ResourceLocation);

  GitHubApiResourceLocation = (function(_super) {

    __extends(GitHubApiResourceLocation, _super);

    GitHubApiResourceLocation.prototype.loadType = "api";

    GitHubApiResourceLocation.prototype.cache = false;

    function GitHubApiResourceLocation(url) {
      this.url = url;
      GitHubApiResourceLocation.__super__.constructor.call(this, this.url);
      this.api = new GitHubApi(this.url);
      if (!this.api.owner) {
        return;
      }
      this.owner = this.api.owner;
      this.repo = this.api.repo;
      this.path = this.api.path;
      this.gitHub = new GitHub({
        owner: this.owner,
        repo: this.repo,
        path: this.path
      });
      this.source = this.gitHub.sourcePageUrl();
    }

    GitHubApiResourceLocation.prototype.load = function(callback) {
      return this.api.load(callback);
    };

    return GitHubApiResourceLocation;

  })(ResourceLocation);

  resourceLocation = function(url) {
    var R, resource;
    resource = new URL(url);
    if (GitHubApi.isApiUrl(resource.url)) {
      R = GitHubApiResourceLocation;
    } else if (resource.onWeb()) {
      R = WebResourceLocation;
    } else {
      R = BlabResourceLocation;
    }
    return new R(url);
  };

  GitHub = (function() {

    GitHub.prototype.branch = "gh-pages";

    GitHub.isIoUrl = function(url) {
      var host, u;
      u = new URL(url);
      host = u.host;
      return host.length === 3 && host[1] === "github" && host[2] === "io";
    };

    function GitHub(spec) {
      var _ref;
      this.spec = spec;
      _ref = this.spec, this.owner = _ref.owner, this.repo = _ref.repo, this.path = _ref.path;
    }

    GitHub.prototype.sourcePageUrl = function() {
      if (!this.owner) {
        return null;
      }
      return "https://github.com/" + this.owner + "/" + this.repo + "/blob/" + this.branch + "/" + this.path;
    };

    GitHub.prototype.linkedUrl = function() {
      if (!this.owner) {
        return null;
      }
      return "https://" + this.owner + ".github.io/" + this.repo + "/" + this.path;
    };

    GitHub.prototype.apiUrl = function() {
      if (!this.owner) {
        return null;
      }
      return GitHubApi.getUrl({
        owner: this.owner,
        repo: this.repo,
        path: this.path
      });
    };

    GitHub.prototype.urls = function() {
      return {
        sourcePageUrl: this.sourcePageUrl(),
        linkedUrl: this.linkedUrl(),
        apiUrl: this.apiUrl()
      };
    };

    return GitHub;

  })();

  GitHubApi = (function(_super) {

    __extends(GitHubApi, _super);

    GitHubApi.hostname = "api.github.com";

    GitHubApi.isApiUrl = function(url) {
      var path, u;
      u = new URL(url);
      path = u.path;
      return u.hostname === GitHubApi.hostname && path.length >= 5 && path[0] === "repos" && path[3] === "contents";
    };

    GitHubApi.getUrl = function(spec) {
      var owner, path, repo;
      owner = spec.owner, repo = spec.repo, path = spec.path;
      return "https://" + GitHubApi.hostname + "/repos/" + owner + "/" + repo + "/contents/" + path;
    };

    GitHubApi.loadParameters = function(url) {
      return {
        type: "json",
        process: function(data) {
          var content;
          content = data.content.replace(/\s/g, '');
          return atob(content);
        }
      };
    };

    function GitHubApi(url) {
      this.url = url;
      GitHubApi.__super__.constructor.call(this, this.url);
      if (!GitHubApi.isApiUrl(this.url)) {
        return;
      }
      this.owner = this.path[1];
      this.repo = this.path[2];
    }

    GitHubApi.prototype.load = function(callback) {
      var success,
        _this = this;
      success = function(data) {
        var content;
        content = data.content.replace(/\s/g, '');
        return callback(atob(content));
      };
      return $.get(this.url, success, "json");
    };

    return GitHubApi;

  })(URL);

  testBlabLocation = function() {
    var loc, r;
    loc = function(url) {
      var b, _ref;
      b = new BlabLocation(url);
      return console.log(b, (_ref = b.gitHub) != null ? _ref.urls() : void 0);
    };
    r = function(url) {
      var z, _ref;
      z = resourceLocation(url);
      return console.log(z, (_ref = z.gitHub) != null ? _ref.urls() : void 0);
    };
    r("http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js");
    r("http://puzlet.org/puzlet/coffee/main.coffee");
    r("/owner/repo/main.coffee");
    r("main.coffee");
    return r("http://api.github.com/repos/owner/repo/contents/path/to/file.ext");
  };

  Resource = (function() {

    function Resource(spec) {
      var _ref, _ref1;
      this.spec = spec;
      this.location = (_ref = this.spec.location) != null ? _ref : resourceLocation(this.spec.url);
      this.url = this.location.url;
      this.loadUrl = this.location.loadUrl;
      this.fileExt = (_ref1 = this.spec.fileExt) != null ? _ref1 : this.location.fileExt;
      this.id = this.spec.id;
      this.loaded = false;
      this.head = document.head;
      this.containers = new ResourceContainers(this);
    }

    Resource.prototype.load = function(callback) {
      var _this = this;
      if (this.spec.gistSource) {
        this.content = this.spec.gistSource;
        this.postLoad(callback);
        return;
      }
      return this.location.load(function(content) {
        _this.content = content;
        return _this.postLoad(callback);
      });
    };

    Resource.prototype.postLoad = function(callback) {
      this.loaded = true;
      return typeof callback === "function" ? callback() : void 0;
    };

    Resource.prototype.isType = function(type) {
      return this.fileExt === type;
    };

    Resource.prototype.setContent = function(content) {
      this.content = content;
      return this.containers.setEditorContent(this.content);
    };

    Resource.prototype.setFromEditor = function(editor) {
      this.content = editor.code();
      return this.containers.setFromEditor(editor);
    };

    Resource.prototype.update = function(content) {
      this.content = content;
      return console.log("No update method for " + this.url);
    };

    Resource.prototype.updateFromContainers = function() {
      return this.containers.updateResource();
    };

    Resource.prototype.hasEval = function() {
      return this.containers.evals().length;
    };

    Resource.prototype.render = function() {
      return this.containers.render();
    };

    Resource.prototype.getEvalContainer = function() {
      return this.containers.getEvalContainer();
    };

    Resource.prototype.inBlab = function() {
      return this.location.inBlab;
    };

    Resource.typeFilter = function(types) {
      return function(resource) {
        var type, _i, _len;
        if (typeof types === "string") {
          return resource.isType(types);
        } else {
          for (_i = 0, _len = types.length; _i < _len; _i++) {
            type = types[_i];
            if (resource.isType(type)) {
              return true;
            }
          }
          return false;
        }
      };
    };

    return Resource;

  })();

  HtmlResource = (function(_super) {

    __extends(HtmlResource, _super);

    function HtmlResource() {
      return HtmlResource.__super__.constructor.apply(this, arguments);
    }

    HtmlResource.prototype.update = function(content) {
      this.content = content;
      return $pz.renderHtml();
    };

    return HtmlResource;

  })(Resource);

  ResourceInline = (function(_super) {

    __extends(ResourceInline, _super);

    function ResourceInline() {
      return ResourceInline.__super__.constructor.apply(this, arguments);
    }

    ResourceInline.prototype.load = function(callback) {
      var _this = this;
      return ResourceInline.__super__.load.call(this, function() {
        _this.createElement();
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    ResourceInline.prototype.createElement = function() {
      this.element = $("<" + this.tag + ">", this.mime ? {
        type: this.mime
      } : void 0, {
        "data-url": this.url
      });
      return this.element.text(this.content);
    };

    ResourceInline.prototype.inDom = function() {
      return $("" + this.tag + "[data-url='" + this.url + "']").length;
    };

    ResourceInline.prototype.appendToHead = function() {
      if (!this.inDom()) {
        return this.head.appendChild(this.element[0]);
      }
    };

    ResourceInline.prototype.update = function(content) {
      this.content = content;
      this.head.removeChild(this.element[0]);
      this.createElement();
      return this.appendToHead();
    };

    return ResourceInline;

  })(Resource);

  CssResourceInline = (function(_super) {

    __extends(CssResourceInline, _super);

    function CssResourceInline() {
      return CssResourceInline.__super__.constructor.apply(this, arguments);
    }

    CssResourceInline.prototype.tag = "style";

    CssResourceInline.prototype.mime = "text/css";

    return CssResourceInline;

  })(ResourceInline);

  CssResourceLinked = (function(_super) {

    __extends(CssResourceLinked, _super);

    function CssResourceLinked() {
      return CssResourceLinked.__super__.constructor.apply(this, arguments);
    }

    CssResourceLinked.prototype.load = function(callback) {
      var t,
        _this = this;
      this.style = document.createElement("link");
      this.style.setAttribute("rel", "stylesheet");
      t = Date.now();
      this.style.setAttribute("href", this.loadUrl);
      setTimeout((function() {
        return _this.postLoad(callback);
      }), 0);
      return this.head.appendChild(this.style);
    };

    return CssResourceLinked;

  })(Resource);

  JsResourceInline = (function(_super) {

    __extends(JsResourceInline, _super);

    function JsResourceInline() {
      return JsResourceInline.__super__.constructor.apply(this, arguments);
    }

    JsResourceInline.prototype.tag = "script";

    return JsResourceInline;

  })(ResourceInline);

  JsResourceLinked = (function(_super) {

    __extends(JsResourceLinked, _super);

    function JsResourceLinked() {
      return JsResourceLinked.__super__.constructor.apply(this, arguments);
    }

    JsResourceLinked.prototype.load = function(callback) {
      var src, t,
        _this = this;
      this.script = document.createElement("script");
      this.head.appendChild(this.script);
      this.script.onload = function() {
        return _this.postLoad(callback);
      };
      src = this.loadUrl;
      console.log("JsResourceLinked load", src);
      t = this.location.cache ? "" : "?t=" + (Date.now());
      return this.script.setAttribute("src", src + t);
    };

    return JsResourceLinked;

  })(Resource);

  CoffeeResource = (function(_super) {

    __extends(CoffeeResource, _super);

    function CoffeeResource() {
      return CoffeeResource.__super__.constructor.apply(this, arguments);
    }

    CoffeeResource.prototype.load = function(callback) {
      var _this = this;
      return CoffeeResource.__super__.load.call(this, function() {
        var spec, _ref;
        spec = {
          id: _this.url,
          preProcess: (_ref = _this.spec.orig) != null ? _ref.preProcess : void 0
        };
        _this.compiler = _this.hasEval() || _this.spec.orig.doEval ? $coffee.evaluator(spec) : $coffee.compiler(spec);
        _this.compiled = false;
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    CoffeeResource.prototype.compile = function() {
      $blab.evaluatingResource = this;
      this.compiler.compile(this.content);
      this.compiled = true;
      this.resultArray = this.compiler.resultArray;
      this.resultStr = this.compiler.result;
      return $.event.trigger("compiledCoffeeScript", {
        url: this.url
      });
    };

    CoffeeResource.prototype.update = function(content) {
      this.content = content;
      return this.compile();
    };

    return CoffeeResource;

  })(Resource);

  JsonResource = (function(_super) {

    __extends(JsonResource, _super);

    function JsonResource() {
      return JsonResource.__super__.constructor.apply(this, arguments);
    }

    return JsonResource;

  })(Resource);

  ResourceFactory = (function() {

    ResourceFactory.prototype.resourceTypes = {
      html: {
        all: HtmlResource
      },
      css: {
        blab: CssResourceInline,
        ext: CssResourceLinked,
        api: CssResourceInline
      },
      js: {
        blab: JsResourceInline,
        ext: JsResourceLinked,
        api: JsResourceInline
      },
      coffee: {
        all: CoffeeResource
      },
      json: {
        all: JsonResource
      },
      py: {
        all: Resource
      },
      m: {
        all: Resource
      },
      svg: {
        all: Resource
      },
      txt: {
        all: Resource
      }
    };

    function ResourceFactory(getGistSource) {
      this.getGistSource = getGistSource;
    }

    ResourceFactory.prototype.create = function(spec) {
      var fileExt, location, resource, subTypes, subtype, url, _ref;
      console.log("===== LOAD", spec.url);
      if (this.checkExists(spec)) {
        return null;
      }
      if (spec.url) {
        url = spec.url;
      } else {
        _ref = this.extractUrl(spec), url = _ref.url, fileExt = _ref.fileExt;
      }
      location = resourceLocation(url);
      if (fileExt == null) {
        fileExt = location.fileExt;
      }
      spec = {
        id: spec.id,
        location: location,
        fileExt: fileExt,
        gistSource: this.getGistSource(url),
        orig: spec
      };
      subTypes = this.resourceTypes[fileExt];
      if (!subTypes) {
        return null;
      }
      subtype = subTypes.all != null ? "all" : location.loadType;
      return resource = new subTypes[subtype](spec);
    };

    ResourceFactory.prototype.checkExists = function(spec) {
      var v, vars, x, z, _i, _len;
      v = spec["var"];
      if (!v) {
        return false;
      }
      vars = v != null ? v.split(".") : void 0;
      z = window;
      for (_i = 0, _len = vars.length; _i < _len; _i++) {
        x = vars[_i];
        z = z[x];
        if (!z) {
          return false;
        }
      }
      console.log("Not loading " + v + " - already exists");
      return true;
    };

    ResourceFactory.prototype.extractUrl = function(spec) {
      var fileExt, p, url, v;
      for (p in spec) {
        v = spec[p];
        url = v;
        fileExt = p;
      }
      return {
        url: url,
        fileExt: fileExt
      };
    };

    return ResourceFactory;

  })();

  ResourceContainers = (function() {

    ResourceContainers.prototype.fileContainerAttr = "data-file";

    ResourceContainers.prototype.evalContainerAttr = "data-eval";

    function ResourceContainers(resource) {
      this.resource = resource;
      this.url = this.resource.url;
    }

    ResourceContainers.prototype.render = function() {
      var file, idx, node, _i, _len, _ref, _ref1, _results;
      this.fileNodes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(new Ace.EditorNode($(node), this.resource));
        }
        return _results;
      }).call(this);
      this.evalNodes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.evals();
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          node = _ref[idx];
          _results.push(new Ace.EvalNode($(node), this.resource, this.fileNodes[idx]));
        }
        return _results;
      }).call(this);
      if ((_ref = $pz.codeNode) == null) {
        $pz.codeNode = {};
      }
      _ref1 = this.files;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        file = _ref1[_i];
        _results.push($pz.codeNode[file.editor.id] = file.editor);
      }
      return _results;
    };

    ResourceContainers.prototype.getEvalContainer = function() {
      var _ref;
      if (((_ref = this.evalNodes) != null ? _ref.length : void 0) !== 1) {
        return null;
      }
      return this.evalNodes[0].container;
    };

    ResourceContainers.prototype.setEditorContent = function(content) {
      var node, triggerChange, _i, _len, _ref, _results;
      triggerChange = false;
      _ref = this.fileNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(node.setCode(triggerChange));
      }
      return _results;
    };

    ResourceContainers.prototype.setFromEditor = function(editor) {
      var node, triggerChange, _i, _len, _ref, _results;
      triggerChange = false;
      _ref = this.fileNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node.editor.id !== editor.id) {
          _results.push(node.setCode(triggerChange));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ResourceContainers.prototype.updateResource = function() {
      if (!this.fileNodes.length) {
        return;
      }
      if (this.fileNodes.length > 1) {
        console.log("Multiple editor nodes for resource.  Updating resource from only first editor node.", this.resource);
      }
      return this.resource.update(this.fileNodes[0].code());
    };

    ResourceContainers.prototype.files = function() {
      return $("div[" + this.fileContainerAttr + "='" + this.url + "']");
    };

    ResourceContainers.prototype.evals = function() {
      return $("div[" + this.evalContainerAttr + "='" + this.url + "']");
    };

    return ResourceContainers;

  })();

  EditorContainer = (function() {

    function EditorContainer(resource, div) {
      this.resource = resource;
      this.div = div;
      this.node = new Ace.EditorNode(this.div, this.resource);
    }

    EditorContainer.prototype.updateResource = function() {
      return this.resource.update(this.node.code());
    };

    return EditorContainer;

  })();

  EvalContainer = (function() {

    function EvalContainer(resource, div) {
      this.resource = resource;
      this.div = div;
      this.node = new Ace.EvalNode(this.div, this.resource);
    }

    EvalContainer.prototype.getContainer = function() {
      return this.node.container;
    };

    return EvalContainer;

  })();

  Resources = (function() {

    Resources.prototype.coreResources = [
      {
        url: "/puzlet/coffeescript/coffeescript.js"
      }, {
        url: "/puzlet/coffeescript/compiler.js"
      }, {
        url: "/puzlet/puzlet/js/wiky.js",
        "var": "Wiky"
      }, {
        url: "/puzlet/puzlet/js/google_analytics.js"
      }
    ];

    Resources.prototype.resourcesSpec = "resources.coffee";

    function Resources(spec) {
      var _this = this;
      this.resources = [];
      this.factory = new ResourceFactory(function(url) {
        return _this.getGistSource(url);
      });
      this.changed = false;
    }

    Resources.prototype.init = function(spec) {
      var core, postload, preload, resources, _ref, _ref1,
        _this = this;
      core = function(cb) {
        return _this.addAndLoad(_this.coreResources, cb);
      };
      preload = (_ref = spec.preload) != null ? _ref : function(f) {
        return f();
      };
      postload = (_ref1 = spec.postload) != null ? _ref1 : function(f) {
        return f;
      };
      resources = function(cb) {
        return _this.loadFromSpecFile({
          url: _this.resourcesSpec,
          callback: function() {
            return cb();
          }
        });
      };
      return core(function() {
        return preload(function() {
          return resources(function() {
            return postload();
          });
        });
      });
    };

    Resources.prototype.addAndLoad = function(resourceSpecs, callback) {
      var resources;
      resources = this.add(resourceSpecs);
      this.loadUnloaded(callback);
      return resources;
    };

    Resources.prototype.add = function(resourceSpecs) {
      var newResources, resource, spec, _i, _len;
      if (!resourceSpecs.length) {
        resourceSpecs = [resourceSpecs];
      }
      newResources = [];
      for (_i = 0, _len = resourceSpecs.length; _i < _len; _i++) {
        spec = resourceSpecs[_i];
        resource = this.factory.create(spec);
        if (!resource) {
          continue;
        }
        newResources.push(resource);
        this.resources.push(resource);
      }
      if (newResources.length === 1) {
        return newResources[0];
      } else {
        return newResources;
      }
    };

    Resources.prototype.load = function(filter, loaded) {
      var resource, resourceLoaded, resources, resourcesToLoad, _i, _len, _results,
        _this = this;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !resource.loaded && filter(resource);
      });
      if (resources.length === 0) {
        if (typeof loaded === "function") {
          loaded();
        }
        return;
      }
      resourcesToLoad = 0;
      resourceLoaded = function(resource) {
        resourcesToLoad--;
        if (resourcesToLoad === 0) {
          _this.appendToHead(filter);
          return typeof loaded === "function" ? loaded() : void 0;
        }
      };
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        resourcesToLoad++;
        _results.push(resource.load(function() {
          return resourceLoaded(resource);
        }));
      }
      return _results;
    };

    Resources.prototype.loadUnloaded = function(loaded) {
      return this.load((function() {
        return true;
      }), loaded);
    };

    Resources.prototype.loadFromSpecFile = function(spec) {
      var specFile, url,
        _this = this;
      url = spec.url;
      specFile = this.add({
        url: url,
        preProcess: this.specFilePreProcessCode(url)
      });
      return this.load((function(resource) {
        return resource.url === url;
      }), function() {
        specFile.compile();
        return _this.loadHtmlCss(function() {
          return _this.loadScripts(function() {
            return typeof spec.callback === "function" ? spec.callback() : void 0;
          });
        });
      });
    };

    Resources.prototype.processSpec = function(resources) {
      var url, _i, _len, _ref, _results;
      console.log("----Process files in resources.coffee");
      _ref = resources.load;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        url = _ref[_i];
        if (typeof url === "string" && url.length) {
          _results.push(this.add({
            url: url
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Resources.prototype.specFilePreProcessCode = function(url) {
      return function(code) {
        return "resources = (obj) -> $blab.resources.processSpec obj\n\n" + code;
      };
    };

    Resources.prototype.loadHtmlCss = function(callback) {
      var _this = this;
      return this.load(["html", "css"], function() {
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Resources.prototype.loadScripts = function(callback) {
      var _this = this;
      return this.load(["json", "js", "coffee", "py", "m", "svg", "txt"], function() {
        _this.compileCoffee(function(coffee) {
          return !(coffee.hasEval() || coffee.spec.orig.doEval || coffee.compiled);
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Resources.prototype.compileCoffee = function(coffeeFilter) {
      var coffee, filter, _i, _len, _ref, _results;
      filter = function(resource) {
        return resource.isType("coffee") && coffeeFilter(resource);
      };
      _ref = this.select(filter);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coffee = _ref[_i];
        _results.push(coffee.compile());
      }
      return _results;
    };

    Resources.prototype.appendToHead = function(filter) {
      var resource, resources, _i, _len, _results;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !(typeof resource.inDom === "function" ? resource.inDom() : void 0) && (resource.appendToHead != null) && filter(resource);
      });
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        _results.push(resource.appendToHead());
      }
      return _results;
    };

    Resources.prototype.select = function(filter) {
      var resource, _i, _len, _ref, _results;
      filter = this.filterFunction(filter);
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (filter(resource)) {
          _results.push(resource);
        }
      }
      return _results;
    };

    Resources.prototype.filterFunction = function(filter) {
      if (typeof filter === "function") {
        return filter;
      } else {
        return Resource.typeFilter(filter);
      }
    };

    Resources.prototype.find = function(id) {
      var f, resource,
        _this = this;
      f = function(p) {
        var r, _i, _len, _ref;
        _ref = _this.resources;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r[p] === id) {
            return r;
          }
        }
        return null;
      };
      resource = f("id");
      if (resource) {
        return resource;
      }
      return resource = f("url");
    };

    Resources.prototype.getContent = function(id) {
      var content, resource;
      resource = this.find(id);
      if (resource) {
        content = resource.content;
        if (resource.fileExt === "json") {
          return JSON.parse(content);
        } else {
          return content;
        }
      } else {
        return null;
      }
    };

    Resources.prototype.getJSON = function(id) {
      var content;
      content = this.getContent(id);
      if (content) {
        return JSON.parse(content);
      }
    };

    Resources.prototype.loadJSON = function(url, callback) {
      var resource;
      resource = this.find(url);
      if (resource == null) {
        resource = this.add({
          url: url
        });
      }
      if (!resource) {
        return null;
      }
      return resource.load((function() {
        return typeof callback === "function" ? callback(resource.content) : void 0;
      }), "json");
    };

    Resources.prototype.render = function() {
      var resource, _i, _len, _ref, _results;
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        _results.push(resource.render());
      }
      return _results;
    };

    Resources.prototype.setGistResources = function(gistFiles) {
      this.gistFiles = gistFiles;
    };

    Resources.prototype.getGistSource = function(url) {
      var _ref, _ref1, _ref2;
      return (_ref = (_ref1 = this.gistFiles) != null ? (_ref2 = _ref1[url]) != null ? _ref2.content : void 0 : void 0) != null ? _ref : null;
    };

    Resources.prototype.updateFromContainers = function() {
      var resource, _i, _len, _ref, _results;
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (resource.edited) {
          _results.push(resource.updateFromContainers());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Resources;

  })();

  resources = new Resources;

  console.log("$blab", $blab);

  $blab.resources = resources;

  $blab.loadJSON = function(url, callback) {
    return resources.loadJSON(url, callback);
  };

  $blab.resource = function(id) {
    return resources.getContent(id);
  };

  render = function() {};

  ready = function() {};

  new Loader(render, ready);

  OLD___BlabLocation = (function(_super) {

    __extends(OLD___BlabLocation, _super);

    function OLD___BlabLocation(url) {
      this.url = url != null ? url : window.location.href;
      OLD___BlabLocation.__super__.constructor.call(this, this.url);
      if (this.hostname === "localhost") {
        this.owner = this.path[0];
        this.repoIdx = 1;
      }
      if (this.hostname === "puzlet.org") {
        this.owner = "puzlet";
        this.repoIdx = 0;
      }
      if (GitHub.isIoUrl(this.url)) {
        this.owner = this.host[0];
        this.repoIdx = 0;
      }
      if (!this.owner) {
        return;
      }
      if (this.hasPath) {
        this.repo = this.path[this.repoIdx];
        this.subf = this.subfolder(this.repoIdx + 1);
      } else {
        this.repo = null;
        this.subf = null;
      }
      this.gitHub = new GitHub({
        owner: this.owner,
        repo: this.repo
      });
      this.source = this.gitHub.sourcePageUrl();
    }

    return OLD___BlabLocation;

  })(URL);

  OLD_Blab = (function() {

    function OLD_Blab() {
      this.publicInterface();
      this.location = new ResourceLocation;
      render = function() {};
      ready = function() {};
      this.loader = new Loader(this.location, render, ready);
    }

    OLD_Blab.prototype.publicInterface = function() {
      window.$pz = {};
      window.$blab = {};
      if (window.console == null) {
        window.console = {};
      }
      if (window.console.log == null) {
        window.console.log = (function() {});
      }
      return $blab.codeDecoration = true;
    };

    return OLD_Blab;

  })();

  OLD_ResourceLocation = (function() {
    /*
        Locations:
        localhost:8000/owner/repo/path
        puzlet.org/repo/path
        owner.github.io/repo/path
        /owner/repo/path
        path
        ...?gist=...
    */

    function OLD_ResourceLocation(url) {
      var branch, f, hasPath, hostParts, match, pathIdx, repoIdx, s, specOwner, _ref;
      this.url = url != null ? url : window.location.href;
      this.a = document.createElement("a");
      this.a.href = this.url;
      this.hostname = this.a.hostname;
      this.path = this.a.pathname;
      this.search = this.a.search;
      this.getGistId();
      hostParts = this.hostname.split(".");
      this.pathParts = this.path ? this.path.split("/") : [];
      hasPath = this.pathParts.length;
      specOwner = hasPath && this.url.indexOf("/") !== -1;
      this.isLocalHost = this.hostname === "localhost";
      this.isPuzlet = this.hostname === "puzlet.org";
      this.isGitHub = hostParts.length === 3 && hostParts[1] === "github" && hostParts[2] === "io";
      this.isGitHubApi = this.hostname === "api.github.com" && this.pathParts.length === 6 && this.pathParts[1] === "repos" && this.pathParts[4] === "contents";
      this.owner = (function() {
        switch (false) {
          case !(this.isLocalHost && specOwner):
            return this.pathParts[1];
          case !this.isPuzlet:
            return "puzlet";
          case !this.isGitHub:
            if (specOwner) {
              return this.pathParts[1];
            } else {
              return hostParts[0];
            }
            break;
          case !(this.isGitHubApi && hasPath):
            return this.pathParts[2];
          default:
            return null;
        }
      }).call(this);
      this.repo = null;
      this.subf = null;
      if (hasPath) {
        repoIdx = (function() {
          switch (false) {
            case !this.isLocalHost:
              if (specOwner) {
                return 2;
              } else {
                return 1;
              }
              break;
            case !this.isPuzlet:
              return 1;
            case !this.isGitHub:
              if (specOwner) {
                return 2;
              } else {
                return 1;
              }
              break;
            case !this.isGitHubApi:
              return 3;
            default:
              return null;
          }
        }).call(this);
        this.repoIdx = repoIdx;
        if (repoIdx) {
          this.repo = this.pathParts[repoIdx];
          pathIdx = repoIdx + (this.isGitHubApi ? 2 : 1);
          this.subf = this.pathParts.slice(pathIdx, -1).join("/");
        }
      }
      match = hasPath ? this.path.match(/\.[0-9a-z]+$/i) : null;
      this.fileExt = (match != null ? match.length : void 0) ? match[0].slice(1) : null;
      this.file = this.fileExt ? specOwner ? this.pathParts.slice(-1)[0] : this.pathParts.slice(-1)[0] : null;
      this.inBlab = this.file && this.url.indexOf("/") === -1;
      if (this.gistId) {
        f = (_ref = this.file) != null ? _ref.split(".") : void 0;
        this.source = ("https://gist.github.com/" + this.gistId) + (this.file ? "#file-" + f[0] + "-" + f[1] : "");
      } else if (this.owner && this.repo) {
        s = this.subf ? "/" + this.subf : "";
        branch = "gh-pages";
        this.source = ("https://github.com/" + this.owner + "/" + this.repo + s) + (this.file ? "/blob/" + branch + "/" + this.file : "");
        this.apiUrl = ("https://api.github.com/repos/" + this.owner + "/" + this.repo + "/contents" + s) + (this.file ? "/" + this.file : "");
        this.linkedUrl = "https://" + this.owner + ".github.io/" + this.repo + s + "/" + this.file;
      } else {
        this.source = this.url;
      }
      console.log(this);
    }

    OLD_ResourceLocation.prototype.getGistId = function() {
      var h, p;
      this.query = this.search.slice(1);
      if (!this.query) {
        return null;
      }
      h = this.query.split("&");
      p = h != null ? h[0].split("=") : void 0;
      return this.gistId = p.length && p[0] === "gist" ? p[1] : null;
    };

    return OLD_ResourceLocation;

  })();

  OLD_Loader = (function() {
    /*
        [
            "main.html",
            "style.css",
            "bar.js",
            "foo.coffee",
            "main.coffee",
            "/some-repo/snippet.html",
            "/other-repo/foo.css",
            "/puzlet/js/d3.min.js",
            "http://domain.com/script.js",
            "/ode-fixed/ode.coffee"
        ]
    */

    OLD_Loader.prototype.OLD_coreResources1 = [
      {
        url: "http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js",
        "var": "jQuery"
      }
    ];

    OLD_Loader.prototype.OLD_coreResources2 = [
      {
        url: "/puzlet/puzlet/js/google_analytics.js"
      }, {
        url: "/puzlet/coffeescript/coffeescript.js"
      }, {
        url: "/puzlet/coffeescript/compiler.js"
      }, {
        url: "/puzlet/puzlet/js/wiky.js",
        "var": "Wiky"
      }
    ];

    OLD_Loader.prototype.resourcesList = {
      url: "resources.json"
    };

    OLD_Loader.prototype.resourcesList2 = {
      url: "resources.coffee"
    };

    OLD_Loader.prototype.htmlResources = window.blabBasic ? [
      {
        url: ""
      }
    ] : [
      {
        url: "/puzlet/puzlet/css/coffeelab.css"
      }, {
        url: "http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/smoothness/jquery-ui.css",
        "var": "jQuery"
      }
    ];

    OLD_Loader.prototype.scriptResources = [
      {
        url: "/puzlet/puzlet/js/acorn.js"
      }, {
        url: "/puzlet/puzlet/js/numeric-1.2.6.js"
      }, {
        url: "/puzlet/puzlet/js/jquery.flot.min.js"
      }, {
        url: "/puzlet/puzlet/js/compile.js"
      }, {
        url: "/puzlet/puzlet/js/jquery.cookie.js"
      }, {
        url: "http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js",
        "var": "jQuery.ui"
      }
    ];

    function OLD_Loader(render, done) {
      var _this = this;
      this.render = render;
      this.done = done;
      this.resources = $blab.resources;
      this.resources.init(function() {
        return _this.loadCssAndScripts(function() {
          return _this.loadResourceList3(function() {
            return _this.done();
          });
        });
      });
    }

    OLD_Loader.prototype.OLD_loadCoreResources = function(callback) {
      var _this = this;
      this.resources.add(this.coreResources1);
      return this.resources.loadUnloaded(function() {
        return _this.resources.loadGitHubFile(function() {
          _this.resources.add(_this.coreResources2);
          return _this.resources.loadUnloaded(function() {
            return typeof callback === "function" ? callback() : void 0;
          });
        });
      });
    };

    OLD_Loader.prototype.OLD_loadGitHub = function(callback) {
      this.github = new GitHub(this.resources);
      return this.github.loadGist(callback);
    };

    OLD_Loader.prototype.loadCssAndScripts = function(callback) {
      var _this = this;
      this.resources.add(this.htmlResources);
      this.resources.add(this.scriptResources);
      return this.resources.loadUnloaded(function() {
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.OLD_loadResourceList = function(callback) {
      var list,
        _this = this;
      list = this.resources.add(this.resourcesList);
      return this.resources.loadUnloaded(function() {
        var listResources, r, spec, _i, _len;
        _this.resources.add(_this.htmlResources);
        _this.resources.add(_this.scriptResources);
        listResources = JSON.parse(list.content);
        for (_i = 0, _len = listResources.length; _i < _len; _i++) {
          r = listResources[_i];
          spec = typeof r === "string" ? {
            url: r
          } : r;
          _this.resources.add(spec);
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.OLD_loadResourceList2 = function(callback) {
      var p, res,
        _this = this;
      p = function(code) {
        return "resources = (obj) -> $blab.resources.processSpec obj, 'main'\n" + code;
      };
      res = this.resources.add({
        url: this.resourcesList2.url,
        preProcess: p
      });
      return this.resources.loadUnloaded(function() {
        res.compile();
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.loadResourceList3 = function(callback) {
      return this.resources.loadFromSpecFile({
        url: this.resourcesList2.url,
        callback: callback
      });
    };

    OLD_Loader.prototype.OLD_loadHtmlCss = function(callback) {
      var _this = this;
      return this.resources.load(["html", "css"], function() {
        var html, _i, _len, _ref;
        _ref = _this.resources.select("html");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          html = _ref[_i];
          _this.render(html.content);
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.OLD_loadScripts = function(callback) {
      var _this = this;
      return this.resources.load(["json", "js", "coffee", "py", "m", "svg", "txt"], function() {
        console.log("*******RESOURCES", _this.resources);
        _this.compileCoffee(function(coffee) {
          return !coffee.hasEval() && !coffee.spec.orig.doEval;
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.loadAce = function(callback) {
      var load,
        _this = this;
      load = function(resources, callback) {
        _this.resources.add(resources);
        return _this.resources.load(["js", "css"], function() {
          return typeof callback === "function" ? callback() : void 0;
        });
      };
      return new Ace.Resources(load, function() {
        _this.resources.render();
        _this.resources.compileCoffee(function(coffee) {
          return coffee.hasEval();
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    OLD_Loader.prototype.OLD_compileCoffee = function(coffeeFilter) {
      var coffee, filter, _i, _len, _ref, _results;
      filter = function(resource) {
        return resource.isType("coffee") && coffeeFilter(resource);
      };
      _ref = this.resources.select(filter);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coffee = _ref[_i];
        _results.push(coffee.compile());
      }
      return _results;
    };

    OLD_Loader.prototype.OLD_publicInterface = function() {
      var _this = this;
      $blab.loadJSON = function(url, callback) {
        return _this.resources.loadJSON(url, callback);
      };
      return $blab.resource = function(id) {
        return _this.resources.getContent(id);
      };
    };

    return OLD_Loader;

  })();

}).call(this);
