// Generated by CoffeeScript 1.3.3
(function() {
  var Ace, ArrayMath, AxesLabels, BasicPage, Blab, BlabCoffee, BlabPlotter, BlabPrinter, Button, CodeNodeComment, CodeNodeFunction, CoffeeCompiler, CoffeeCompilerEval, CoffeeEditor, CoffeeEval, CoffeeEvaluator, CoffeeResource, ComplexMath, CredentialsForm, CssResourceInline, CssResourceLinked, EditorContainer, EvalBoxPlotter, EvalContainer, FavIcon, Figure, GitHub, GithubRibbon, GoogleAnalytics, HtmlResource, ImageButton, Inspector, JsResourceInline, JsResourceLinked, JsonResource, Loader, MathJaxProcessor, NavButtons, Notes, NumericFunctions, ObjectProperty, OpenInTab, Page, PageTitle, Resource, ResourceContainers, ResourceFactory, ResourceImages, ResourceInline, ResourceLocation, Resources, SaveButton, ScalarMath, Slide, SlideContainer, SlideDeck, SlideIndex, SlidesButton, ThumbImages, TypeMath, arrayToHash, hasOwn, inspect, isArray, isBoolean, isDate, isError, isFunction, isNull, isNumber, isObject, isRegExp, isString, isUndefined, objectKeys, objectToString, reduce, stylizeNoColor, stylizeWithColor, _extend,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BlabCoffee = (function() {

    BlabCoffee.prototype.predefinedCoffee = "nm = numeric\nsize = nm.size\nmax = nm.max\nabs = nm.abs\npow = nm.pow\nsqrt = nm.sqrt\nexp = nm.exp\nlog = nm.log\nsin = nm.sin\ncos = nm.cos\ntan = nm.tan\nasin = nm.asin\nacos = nm.acos\natan = nm.atan\natan2 = nm.atan2\nceil = nm.ceil\nfloor = nm.floor\nround = nm.round\nrand = nm.rand\ncomplex = nm.complex\nconj = nm.conj\nlinspace = nm.linspace\nprint = nm.print\nplot = nm.plot\nplotSeries = nm.plotSeries\neplot = nm.plot\nfigure = nm.figure\npi = Math.PI\nj = complex 0, 1\nprint.clear()\neplot.clear()";

    BlabCoffee.prototype.basicOps = [["add", "add"], ["sub", "subtract"], ["mul", "multiply"], ["div", "divide"]];

    BlabCoffee.prototype.modOp = ["mod", "modulo"];

    BlabCoffee.prototype.eqOps = [["mod", "modulo"], ["eq", "equals"], ["lt", "lt"], ["gt", "gt"], ["leq", "leq"], ["geq", "geq"]];

    BlabCoffee.prototype.assignOps = ["addeq", "subeq", "muleq", "diveq", "modeq"];

    function BlabCoffee() {
      this.ops = this.basicOps.concat([this.modOp]).concat(this.eqOps);
      this.predefinedCoffeeLines = this.predefinedCoffee.split("\n");
    }

    BlabCoffee.prototype.initializeMath = function() {
      if (this.mathInitialized != null) {
        return;
      }
      window._$_ = PaperScript._$_;
      window.$_ = PaperScript.$_;
      new ScalarMath(this.ops);
      new ArrayMath(this.ops, this.assignOps);
      new ComplexMath(this.basicOps);
      new NumericFunctions;
      new BlabPrinter;
      new BlabPlotter;
      new EvalBoxPlotter;
      return this.mathInitialized = true;
    };

    BlabCoffee.prototype.compile = function(code, isMain, bare) {
      var codeLines, firstLine, i, isMainStr, js, l, lf, preamble, vanilla, _i, _len;
      if (isMain == null) {
        isMain = true;
      }
      if (bare == null) {
        bare = false;
      }
      lf = "\n";
      isMainStr = isMain ? 'true' : 'false';
      preamble = ["__isMain__ = " + isMainStr + lf];
      codeLines = code.split(lf);
      firstLine = codeLines[0];
      vanilla = firstLine === "#!vanilla";
      if (!vanilla) {
        this.initializeMath();
        preamble = preamble.concat(this.predefinedCoffeeLines);
        for (i = _i = 0, _len = codeLines.length; _i < _len; i = ++_i) {
          l = codeLines[i];
          if (l === "#!no-math-sugar") {
            codeLines[i] = "_disable_operator_overloading();";
          }
          if (l === "#!math-sugar") {
            codeLines[i] = "_enable_operator_overloading();";
          }
        }
      }
      codeLines = preamble.concat(codeLines);
      code = codeLines.join(lf);
      js = CoffeeScript.compile(code, {
        bare: bare
      });
      if (!vanilla) {
        js = PaperScript.compile(js);
      }
      return js;
    };

    return BlabCoffee;

  })();

  TypeMath = (function() {

    function TypeMath(proto) {
      this.proto = proto;
    }

    TypeMath.prototype.setMethod = function(op) {
      return this.proto[op] = function(y) {
        return numeric[op](this, y);
      };
    };

    TypeMath.prototype.setUnaryMethod = function(op) {
      return this.proto[op] = function() {
        return numeric[op](this);
      };
    };

    TypeMath.prototype.overloadOperator = function(a, b) {
      return this.proto["__" + b] = this.proto[a];
    };

    return TypeMath;

  })();

  ScalarMath = (function(_super) {

    __extends(ScalarMath, _super);

    function ScalarMath(ops) {
      var a, b, op, _i, _len, _ref;
      this.ops = ops;
      ScalarMath.__super__.constructor.call(this, Number.prototype);
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        a = op[0], b = op[1];
        this.setMethod(a);
        this.overloadOperator(a, b);
      }
      this.proto.pow = function(p) {
        return Math.pow(this, p);
      };
    }

    ScalarMath.prototype.setMethod = function(op) {
      return this.proto[op] = function(y) {
        return numeric[op](+this, y);
      };
    };

    return ScalarMath;

  })(TypeMath);

  ArrayMath = (function(_super) {

    __extends(ArrayMath, _super);

    function ArrayMath(ops, assignOps) {
      var a, b, op, pow, _i, _j, _len, _len1, _ref, _ref1;
      this.ops = ops;
      this.assignOps = assignOps;
      ArrayMath.__super__.constructor.call(this, Array.prototype);
      this.proto.size = function() {
        return [this.length, this[0].length];
      };
      this.proto.max = function() {
        return Math.max.apply(null, this);
      };
      numeric.zeros = function(m, n) {
        return numeric.rep([m, n], 0);
      };
      numeric.ones = function(m, n) {
        return numeric.rep([m, n], 1);
      };
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        a = op[0], b = op[1];
        this.setMethod(a);
        this.overloadOperator(a, b);
      }
      _ref1 = this.assignOps;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        op = _ref1[_j];
        this.setMethod(op);
      }
      this.setMethod("dot");
      this.setUnaryMethod("neg");
      this.overloadOperator("neg", "negate");
      this.setUnaryMethod("clone");
      this.setUnaryMethod("sum");
      this.proto.transpose = function() {
        return numeric.transpose(this);
      };
      Object.defineProperty(this.proto, 'T', {
        get: function() {
          return this.transpose();
        }
      });
      pow = numeric.pow;
      this.proto.pow = function(p) {
        return pow(this, p);
      };
      numeric.rand = function(sz) {
        if (sz == null) {
          sz = null;
        }
        if (sz) {
          return numeric.random(sz);
        } else {
          return Math.random();
        }
      };
    }

    return ArrayMath;

  })(TypeMath);

  ComplexMath = (function(_super) {

    __extends(ComplexMath, _super);

    function ComplexMath(ops) {
      var complex, j, j2, negj, op, _i, _len, _ref;
      this.ops = ops;
      ComplexMath.__super__.constructor.call(this, numeric.T.prototype);
      numeric.complex = function(x, y) {
        if (y == null) {
          y = 0;
        }
        return new numeric.T(x, y);
      };
      complex = numeric.complex;
      this.proto.size = function() {
        return [this.x.length, this.x[0].length];
      };
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        this.defineOperators(op[0], op[1]);
      }
      this.proto.__negate = this.proto.neg;
      Object.defineProperty(this.proto, 'T', {
        get: function() {
          return this.transpose();
        }
      });
      Object.defineProperty(this.proto, 'H', {
        get: function() {
          return this.transjugate();
        }
      });
      this.proto.arg = function() {
        var x, y;
        x = this.x;
        y = this.y;
        return numeric.atan2(y, x);
      };
      this.proto.pow = function(p) {
        var a, nm, pa, r;
        nm = numeric;
        r = this.abs().x;
        a = this.arg();
        pa = a.mul(p);
        return complex(nm.cos(pa), nm.sin(pa)).mul(r.pow(p));
      };
      this.proto.sqrt = function() {
        return this.pow(0.5);
      };
      this.proto.log = function() {
        var a, r;
        r = this.abs().x;
        a = this.arg();
        return complex(numeric.log(r), a);
      };
      j = complex(0, 1);
      j2 = complex(0, 2);
      negj = complex(0, -1);
      this.proto.sin = function() {
        var e1, e2;
        e1 = (this.mul(j)).exp();
        e2 = (this.mul(negj)).exp();
        return (e1.sub(e2)).div(j2);
      };
      this.proto.cos = function() {
        var e1, e2;
        e1 = (this.mul(j)).exp();
        e2 = (this.mul(negj)).exp();
        return (e1.add(e2)).div(2);
      };
    }

    ComplexMath.prototype.defineOperators = function(op, op1) {
      var numericOld;
      numericOld = {};
      this.proto["__" + op1] = this.proto[op];
      numericOld[op] = numeric[op];
      return numeric[op] = function(x, y) {
        if (typeof x === "number" && y instanceof numeric.T) {
          return numeric.complex(x)[op](y);
        } else {
          return numericOld[op](x, y);
        }
      };
    };

    return ComplexMath;

  })(TypeMath);

  NumericFunctions = (function() {

    NumericFunctions.prototype.overrideFcns = ["sqrt", "sin", "cos", "exp", "log"];

    function NumericFunctions() {
      var f, nabs, natan2, nm, npow, _i, _len, _ref;
      _ref = this.overrideFcns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.override(f);
      }
      nm = numeric;
      npow = nm.pow;
      nm.pow = function(x, p) {
        if (x.pow != null) {
          return x.pow(p);
        } else {
          return npow(x, p);
        }
      };
      nabs = nm.abs;
      nm.abs = function(x) {
        if ((x.abs != null) && x instanceof nm.T) {
          return x.abs().x;
        } else {
          return nabs(x);
        }
      };
      natan2 = nm.atan2;
      nm.atan2 = function(y, x) {
        if (typeof x === "number" && typeof y === "number") {
          return Math.atan2(y, x);
        } else {
          return natan2(y, x);
        }
      };
    }

    NumericFunctions.prototype.override = function(name) {
      var f;
      f = numeric[name];
      return numeric[name] = function(x) {
        if (typeof x === "object" && (x[name] != null)) {
          return x[name]();
        } else {
          return f(x);
        }
      };
    };

    return NumericFunctions;

  })();

  BlabPrinter = (function() {

    function BlabPrinter() {
      var id, nm;
      nm = numeric;
      id = "blab_print";
      nm.print = function(x) {
        var container, htmlOut;
        container = $("#" + id);
        if (!container.length) {
          container = $("<div>", {
            id: id
          });
          htmlOut = $("#codeout_html");
          htmlOut.append(container);
        }
        return container.append("<pre>" + nm.prettyPrint(x) + "</pre>");
      };
      nm.print.clear = function() {
        var container;
        container = $("#" + id);
        if (container) {
          return container.empty();
        }
      };
    }

    return BlabPrinter;

  })();

  BlabPlotter = (function() {

    function BlabPlotter() {
      numeric.htmlplot = function(x, y, params) {
        var flot, htmlOut, _ref;
        if (params == null) {
          params = {};
        }
        flot = $("#flot");
        if (!flot.length) {
          flot = $("<div>", {
            id: "flot",
            css: {
              width: "600px",
              height: "300px"
            }
          });
          htmlOut = $("#codeout_html");
          htmlOut.append(flot);
        }
        if ((_ref = params.series) == null) {
          params.series = {
            color: "#55f"
          };
        }
        return $.plot($("#flot"), [numeric.transpose([x, y])], params);
      };
    }

    return BlabPlotter;

  })();

  EvalBoxPlotter = (function() {

    function EvalBoxPlotter() {
      var _this = this;
      this.clear();
      numeric.plot = function(x, y, params) {
        if (params == null) {
          params = {};
        }
        return _this.plot(x, y, params);
      };
      numeric.plot.clear = function() {
        return _this.clear();
      };
      numeric.figure = function(params) {
        if (params == null) {
          params = {};
        }
        return _this.figure(params);
      };
      numeric.plotSeries = function(series, params) {
        if (params == null) {
          params = {};
        }
        return _this.plotSeries(series, params);
      };
      this.figures = [];
      this.plotCount = 0;
    }

    EvalBoxPlotter.prototype.clear = function() {
      var resource, _ref;
      resource = $blab.evaluatingResource;
      return resource != null ? (_ref = resource.getEvalContainer()) != null ? _ref.find(".eval_flot").remove() : void 0 : void 0;
    };

    EvalBoxPlotter.prototype.figure = function(params) {
      var flotId, resource;
      if (params == null) {
        params = {};
      }
      resource = $blab.evaluatingResource;
      if (!resource) {
        return;
      }
      flotId = "eval_plot_" + resource.url + "_" + this.plotCount;
      this.figures[flotId] = new Figure(resource, flotId, params);
      this.plotCount++;
      return flotId;
    };

    EvalBoxPlotter.prototype.doPlot = function(params, plotFcn) {
      var fig, flotId, _ref;
      flotId = (_ref = params.fig) != null ? _ref : this.figure(params);
      if (!flotId) {
        return null;
      }
      fig = this.figures[flotId];
      if (!fig) {
        return null;
      }
      plotFcn(fig);
      if (params.fig) {
        return null;
      } else {
        return flotId;
      }
    };

    EvalBoxPlotter.prototype.plot = function(x, y, params) {
      if (params == null) {
        params = {};
      }
      return this.doPlot(params, function(fig) {
        return fig.plot(x, y);
      });
    };

    EvalBoxPlotter.prototype.plotSeries = function(series, params) {
      if (params == null) {
        params = {};
      }
      return this.doPlot(params, function(fig) {
        return fig.plotSeries(series);
      });
    };

    return EvalBoxPlotter;

  })();

  Figure = (function() {

    function Figure(resource, flotId, params) {
      var _ref, _ref1, _ref2,
        _this = this;
      this.resource = resource;
      this.flotId = flotId;
      this.params = params;
      this.container = this.resource.getEvalContainer();
      if (!((_ref = this.container) != null ? _ref.length : void 0)) {
        return;
      }
      this.w = this.container[0].offsetWidth;
      this.flot = $("<div>", {
        id: this.flotId,
        "class": "eval_flot",
        css: {
          position: "absolute",
          top: "0px",
          width: ((_ref1 = this.params.width) != null ? _ref1 : this.w - 50) + "px",
          height: ((_ref2 = this.params.height) != null ? _ref2 : 150) + "px",
          margin: "0px",
          marginLeft: "30px",
          marginTop: "20px",
          zIndex: 1
        }
      });
      this.container.append(this.flot);
      this.flot.hide();
      this.positioned = false;
      setTimeout((function() {
        return _this.setPos();
      }), 10);
    }

    Figure.prototype.setPos = function() {
      var p, _ref;
      p = this.resource.compiler.findStr(this.flotId);
      if (!p) {
        return;
      }
      this.flot.css({
        top: "" + (p * 22) + "px"
      });
      this.flot.show();
      if ((_ref = this.axesLabels) != null) {
        _ref.position();
      }
      return this.positioned = true;
    };

    Figure.prototype.plot = function(x, y) {
      var d, line, nLines, v, _i, _len;
      if (this.flot == null) {
        return;
      }
      if ((y != null ? y.length : void 0) && (y[0].length != null)) {
        nLines = y.length;
        d = [];
        for (_i = 0, _len = y.length; _i < _len; _i++) {
          line = y[_i];
          v = numeric.transpose([x, line]);
          d.push(v);
        }
      } else {
        d = [numeric.transpose([x, y])];
      }
      return this.plotSeries(d);
    };

    Figure.prototype.plotSeries = function(series) {
      var _base, _ref;
      if (this.flot == null) {
        return;
      }
      if ((_ref = (_base = this.params).series) == null) {
        _base.series = {
          color: "#55f"
        };
      }
      if (!this.positioned) {
        this.flot.show();
      }
      $.plot(this.flot, series, this.params);
      if (!this.positioned) {
        this.flot.hide();
      }
      this.axesLabels = new AxesLabels(this.flot, this.params);
      if (this.positioned) {
        return this.axesLabels.position();
      }
    };

    return Figure;

  })();

  AxesLabels = (function() {

    function AxesLabels(container, params) {
      this.container = container;
      this.params = params;
      if (this.params.xlabel) {
        this.xaxisLabel = this.appendLabel(this.params.xlabel, "xaxisLabel");
      }
      if (this.params.ylabel) {
        this.yaxisLabel = this.appendLabel(this.params.ylabel, "yaxisLabel");
      }
    }

    AxesLabels.prototype.appendLabel = function(txt, className) {
      var label;
      label = $("<div>", {
        text: txt
      });
      label.addClass("axisLabel");
      label.addClass(className);
      this.container.append(label);
      return label;
    };

    AxesLabels.prototype.position = function() {
      var _ref, _ref1;
      if ((_ref = this.xaxisLabel) != null) {
        _ref.css({
          marginLeft: (-this.xaxisLabel.width() / 2 + 10) + "px",
          marginBottom: "-20px"
        });
      }
      return (_ref1 = this.yaxisLabel) != null ? _ref1.css({
        marginLeft: "-27px",
        marginTop: (this.yaxisLabel.width() / 2 - 10) + "px"
      }) : void 0;
    };

    return AxesLabels;

  })();

  /* Not used - to obsolete
  
  complexMatrices: ->
  	
  	Array.prototype.complexParts = ->
  		A = this
  		[m, n] = size A
  		vParts = (v) -> [(a.x for a in v), (a.y for a in v)]
  		if not n
  			# Vector
  			[real, imag] = vParts A
  		else
  			# Matrix
  			real = new Array m
  			imag = new Array m
  			[real[m], imag[m]] = vParts(row) for row, m in A
  		[real, imag]
  	
  	# These could be made more efficient.
  	Array.prototype.real = -> this.complexParts()[0]
  	Array.prototype.imag = -> this.complexParts()[1]
  	
  	#Array.prototype.isComplex = ->
  	#	A = this
  	#	[m, n] = size A
  
  manualOverloadExamples: ->
  	# Not currently used - using numericjs instead.
  	
  	Number.prototype.__add = (y) ->
  		# ZZZ is this inefficient for scaler x+y?
  		if typeof y is "number"
  			return this + y
  		else if y instanceof Array
  			return (this + yn for yn in y)
  		else
  			undefined
  
  	Array.prototype.__add = (y) ->
  		if typeof y is "number"
  			return (x + y for x in this)
  		else if y instanceof Array
  			return (x + y[n] for x, n in this)
  		else
  			undefined
  */


  /*
  Echos the value of a value. Trys to print the value out
  in the best way possible given the different types.
  
  {Object} obj The object to print out.
  {Object} opts Optional options object that alters the output.
  Adapted from node.js object inspector.
  License MIT (© Joyent)
  */


  inspect = function(obj, opts) {
    var inspector;
    inspector = new Inspector(obj, opts);
    return inspector.formattedObj;
  };

  Inspector = (function() {

    Inspector.prototype.lf = "\n";

    function Inspector(obj, opts) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.obj = obj;
      this.ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) {
        this.ctx.depth = arguments[2];
      }
      if (arguments.length >= 4) {
        this.ctx.colors = arguments[3];
      }
      if (opts) {
        _extend(this.ctx, opts);
      }
      if ((_ref = (_base = this.ctx).showHidden) == null) {
        _base.showHidden = false;
      }
      if ((_ref1 = (_base1 = this.ctx).depth) == null) {
        _base1.depth = 2;
      }
      if ((_ref2 = (_base2 = this.ctx).keysLimit) == null) {
        _base2.keysLimit = 20;
      }
      if ((_ref3 = (_base3 = this.ctx).arrayLimit) == null) {
        _base3.arrayLimit = 20;
      }
      if ((_ref4 = (_base4 = this.ctx).processJQuery) == null) {
        _base4.processJQuery = false;
      }
      if ((_ref5 = (_base5 = this.ctx).processNumericJs) == null) {
        _base5.processNumericJs = false;
      }
      if ((_ref6 = (_base6 = this.ctx).colors) == null) {
        _base6.colors = false;
      }
      if ((_ref7 = (_base7 = this.ctx).customInspect) == null) {
        _base7.customInspect = true;
      }
      if (this.ctx.colors) {
        this.ctx.stylize = stylizeWithColor;
      }
      this.formattedObj = this.formatValue(this.obj, this.ctx.depth);
    }

    Inspector.prototype.formatValue = function(value, recurseTimes) {
      var baseInfo, custom, keys, keysLimited, output, primitive, shortcut, visibleKeys, _ref,
        _this = this;
      if (custom = this.customFormat(value)) {
        return custom;
      }
      if (!this.ctx.processJQuery && value.jquery) {
        return "[jQuery]";
      }
      if (!this.ctx.processNumericJs && value.name === "numeric") {
        return "[numericjs]";
      }
      if ((typeof value === "string") && value.indexOf("eval_plot") === 0) {
        return "";
      }
      if (primitive = this.formatPrimitive(value)) {
        return primitive;
      }
      _ref = this.getKeys(value), keys = _ref.keys, visibleKeys = _ref.visibleKeys, keysLimited = _ref.keysLimited;
      if (shortcut = this.formatObjectShortcut(value, keys)) {
        return shortcut;
      }
      baseInfo = this.getBase(value);
      if (keys.length === 0 && (!baseInfo.array || value.length === 0)) {
        return base.braces[0] + baseInfo.base + baseInfo.braces[1];
      }
      if (recurseTimes < 0) {
        return this.haltProcessing(value);
      }
      this.ctx.seen.push(value);
      output = void 0;
      if (baseInfo.array) {
        output = this.formatArray(value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return _this.formatProperty(value, recurseTimes, visibleKeys, key, baseInfo.array);
        });
      }
      this.ctx.seen.pop();
      return this.reduceToSingleString(output, baseInfo.base, baseInfo.braces, keysLimited);
    };

    Inspector.prototype.formatArray = function(value, recurseTimes, visibleKeys, keys) {
      var i, key, output, own, s, val, _i, _j, _len, _len1;
      output = [];
      for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
        val = value[i];
        s = String(i);
        own = hasOwn(value, s);
        output.push(own ? this.formatProperty(value, recurseTimes, visibleKeys, s, true) : "");
      }
      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
        key = keys[_j];
        if (!key.match(/^\d+$/)) {
          output.push(this.formatProperty(value, recurseTimes, visibleKeys, key, true));
        }
      }
      return output;
    };

    Inspector.prototype.formatProperty = function(value, recurseTimes, visibleKeys, key, array) {
      var property,
        _this = this;
      property = new ObjectProperty({
        value: value,
        recurseTimes: recurseTimes,
        visibleKeys: visibleKeys,
        key: key,
        array: array,
        ctx: this.ctx,
        formatValue: function(v, recurse) {
          return _this.formatValue(v, recurse);
        }
      });
      return property.format();
    };

    Inspector.prototype.formatObjectShortcut = function(value, keys) {
      var name;
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return this.formatError(value);
      }
      if (keys.length) {
        return null;
      }
      if (isFunction(value)) {
        name = (value.name ? ": " + value.name : "");
        return this.stylize("[Function" + name + "]", "special");
      }
      if (isRegExp(value)) {
        return this.stylize(RegExp.prototype.toString.call(value), "regexp");
      }
      if (isDate(value)) {
        return this.stylize(Date.prototype.toString.call(value), "date");
      }
      if (isError(value)) {
        return this.formatError(value);
      }
      return null;
    };

    Inspector.prototype.formatPrimitive = function(value) {
      var simple;
      if (isUndefined(value)) {
        return this.stylize("undefined", "undefined");
      }
      if (isString(value)) {
        simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, "\"") + "'";
        return this.stylize(simple, "string");
      }
      if (isNumber(value)) {
        return this.stylize("" + Math.round(value * 10000) / 10000, "number");
      }
      if (isBoolean(value)) {
        return this.stylize("" + value, "boolean");
      }
      if (isNull(value)) {
        return this.stylize("null", "null");
      }
      return null;
    };

    Inspector.prototype.formatError = function(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    };

    Inspector.prototype.haltProcessing = function(value) {
      if (isRegExp(value)) {
        return this.stylize(RegExp.prototype.toString.call(value), "regexp");
      } else {
        return this.stylize("[Object]", "special");
      }
    };

    Inspector.prototype.reduceToSingleString = function(output, base, braces, keysLimited) {
      var length, numLinesEst;
      numLinesEst = 0;
      length = reduce(output, function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf(this.lf) >= 0) {
          numLinesEst++;
        }
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : "" + (base + this.lf)) + "" + output.join(" " + this.lf) + "" + braces[1];
      }
      return braces[0] + base + "" + output.join(", ") + "" + (keysLimited ? "..." : "") + braces[1];
    };

    Inspector.prototype.getBase = function(value) {
      var array, base, braces, n;
      base = "";
      array = isArray(value);
      braces = array ? ["[", "]"] : ["{", "}"];
      if (isFunction(value)) {
        n = (value.name ? ": " + value.name : "");
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + this.formatError(value);
      }
      return {
        base: base,
        braces: braces,
        array: array
      };
    };

    Inspector.prototype.getKeys = function(value) {
      var keys, keysLimited, visibleKeys;
      keys = objectKeys(value);
      keysLimited = keys.length > this.ctx.keysLimit;
      if (keysLimited) {
        keys = keys.slice(0, (this.ctx.keysLimit - 1) + 1 || 9e9);
      }
      visibleKeys = arrayToHash(keys);
      try {
        if (this.ctx.showHidden && Object.getOwnPropertyNames) {
          keys = Object.getOwnPropertyNames(value);
        }
      } catch (_error) {}
      return {
        keys: keys,
        visibleKeys: visibleKeys,
        keysLimited: keysLimited
      };
    };

    Inspector.prototype.customFormat = function(value, recurseTimes) {
      var custom, ret;
      custom = this.ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== inspect && !(value.constructor && value.constructor.prototype.is(value));
      if (!custom) {
        return null;
      }
      ret = value.inspect(recurseTimes, this.ctx);
      if (!isString(ret)) {
        ret = this.formatValue(ret, recurseTimes);
      }
      return ret;
    };

    Inspector.prototype.stylize = function(value) {
      return this.ctx.stylize(value);
    };

    return Inspector;

  })();

  ObjectProperty = (function() {

    ObjectProperty.prototype.lf = "\n";

    function ObjectProperty(spec) {
      this.spec = spec;
      this.value = this.spec.value;
      this.key = this.spec.key;
      this.desc = {
        value: void 0
      };
      try {
        this.desc.value = this.value[this.key];
      } catch (_error) {}
      try {
        if (Object.getOwnPropertyDescriptor) {
          this.desc = Object.getOwnPropertyDescriptor(this.value, this.key) || desc;
        }
      } catch (_error) {}
    }

    ObjectProperty.prototype.format = function() {
      var name, str;
      str = this.val();
      if (this.spec.array && this.key.match(/^\d+$/)) {
        return str;
      }
      name = this.name(str);
      return "" + name + ":" + str;
    };

    ObjectProperty.prototype.name = function(str) {
      var name;
      if (!hasOwn(this.spec.visibleKeys, this.key)) {
        return "[" + this.key + "]";
      }
      name = JSON.stringify("" + this.key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = this.stylize(name, "name");
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, "\"").replace(/(^"|"$)/g, "'");
        name = this.stylize(name, "string");
      }
      return name;
    };

    ObjectProperty.prototype.val = function() {
      var array, l, lines, nextRecurse, spaces, str;
      if (str = this.getterSetter()) {
        return str;
      }
      if (this.spec.ctx.seen.indexOf(this.desc.value) !== -1) {
        return this.stylize("[Circular]", "special");
      }
      nextRecurse = isNull(this.spec.recurseTimes) ? null : this.spec.recurseTimes - 1;
      str = this.spec.formatValue(this.desc.value, nextRecurse);
      if (str.indexOf(this.lf) === -1) {
        return str;
      }
      lines = str.split("\n");
      array = this.spec.array;
      spaces = array ? "" : "";
      l = lines.map(function(line) {
        return spaces + line;
      }).join(this.lf);
      return str = array ? l.substr(0) : this.lf + l;
    };

    ObjectProperty.prototype.getterSetter = function() {
      var str;
      str = null;
      if (this.desc.get) {
        if (this.desc.set) {
          str(this.stylize("[Getter/Setter]", "special"));
        } else {
          str = this.stylize("[Getter]", "special");
        }
      } else if (this.desc.set) {
        str = this.stylize("[Setter]", "special");
      }
      return str;
    };

    ObjectProperty.prototype.stylize = function(x) {
      return this.spec.ctx.stylize(x);
    };

    return ObjectProperty;

  })();

  objectKeys = function(val) {
    if (Object.keys) {
      return Object.keys(val);
    }
  };

  _extend = function(origin, add) {
    var i, keys;
    if (!add || !isObject(add)) {
      return origin;
    }
    keys = objectKeys(add);
    i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  isArray = function(v) {
    return v.constructor === Array;
  };

  reduce = function(array, f) {
    if (!array) {
      return 0;
    }
    return array.reduce(f);
  };

  stylizeNoColor = function(str, styleType) {
    return str;
  };

  isBoolean = function(arg) {
    return typeof arg === "boolean";
  };

  isUndefined = function(arg) {
    return arg === void 0;
  };

  stylizeWithColor = function(str, styleType) {
    var style;
    style = inspect.styles[styleType];
    if (style) {
      return "\u001b[" + inspect.colors[style][0] + "m" + str + "\u001b[" + inspect.colors[style][1] + "m";
    } else {
      return str;
    }
  };

  isFunction = function(arg) {
    return typeof arg === "function";
  };

  isString = function(arg) {
    return typeof arg === "string";
  };

  isNumber = function(arg) {
    return typeof arg === "number";
  };

  isNull = function(arg) {
    return arg === null;
  };

  hasOwn = function(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  };

  isRegExp = function(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
  };

  isObject = function(arg) {
    return typeof arg === "object" && arg !== null;
  };

  isError = function(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
  };

  isDate = function(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
  };

  objectToString = function(o) {
    return Object.prototype.toString.call(o);
  };

  arrayToHash = function(array) {
    var hash, val, _i, _len;
    hash = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      val = array[_i];
      hash[val] = true;
    }
    return hash;
  };

  inspect.colors = {
    bold: [1, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    white: [37, 39],
    grey: [90, 39],
    black: [30, 39],
    blue: [34, 39],
    cyan: [36, 39],
    green: [32, 39],
    magenta: [35, 39],
    red: [31, 39],
    yellow: [33, 39]
  };

  inspect.styles = {
    special: "cyan",
    number: "yellow",
    boolean: "yellow",
    undefined: "grey",
    "null": "bold",
    string: "green",
    date: "magenta",
    regexp: "red"
  };

  window.$inspect2 = inspect;

  ResourceLocation = (function() {

    function ResourceLocation(url) {
      var branch, f, hasPath, hostParts, match, pathIdx, repoIdx, s, _ref;
      this.url = url != null ? url : window.location.href;
      this.a = document.createElement("a");
      this.a.href = this.url;
      this.host = this.a.hostname;
      this.path = this.a.pathname;
      this.search = this.a.search;
      this.getGistId();
      hostParts = this.host.split(".");
      this.pathParts = this.path ? this.path.split("/") : [];
      hasPath = this.pathParts.length;
      this.isLocalHost = this.host === "localhost";
      this.isPuzlet = this.host === "puzlet.org";
      this.isGitHub = hostParts.length === 3 && hostParts[1] === "github" && hostParts[2] === "io";
      this.isGitHubApi = this.host === "api.github.com" && this.pathParts.length === 6 && this.pathParts[1] === "repos" && this.pathParts[4] === "contents";
      this.owner = (function() {
        switch (false) {
          case !(this.isLocalHost && hasPath):
            return this.pathParts[1];
          case !this.isPuzlet:
            return "puzlet";
          case !this.isGitHub:
            return hostParts[0];
          case !(this.isGitHubApi && hasPath):
            return this.pathParts[2];
          default:
            return null;
        }
      }).call(this);
      this.repo = null;
      this.subf = null;
      if (hasPath) {
        repoIdx = (function() {
          switch (false) {
            case !this.isLocalHost:
              return 2;
            case !(this.isPuzlet || this.isGitHub):
              return 1;
            case !this.isGitHubApi:
              return 3;
            default:
              return null;
          }
        }).call(this);
        if (repoIdx) {
          this.repo = this.pathParts[repoIdx];
          pathIdx = repoIdx + (this.isGitHubApi ? 2 : 1);
          this.subf = this.pathParts.slice(pathIdx, -1).join("/");
        }
      }
      match = hasPath ? this.path.match(/\.[0-9a-z]+$/i) : null;
      this.fileExt = (match != null ? match.length : void 0) ? match[0].slice(1) : null;
      this.file = this.fileExt ? this.pathParts.slice(-1)[0] : null;
      this.inBlab = this.file && this.url.indexOf("/") === -1;
      if (this.gistId) {
        f = (_ref = this.file) != null ? _ref.split(".") : void 0;
        this.source = ("https://gist.github.com/" + this.gistId) + (this.file ? "#file-" + f[0] + "-" + f[1] : "");
      } else if (this.owner && this.repo) {
        s = this.subf ? "/" + this.subf : "";
        branch = "gh-pages";
        this.source = ("https://github.com/" + this.owner + "/" + this.repo + s) + (this.file ? "/blob/" + branch + "/" + this.file : "");
        this.apiUrl = ("https://api.github.com/repos/" + this.owner + "/" + this.repo + "/contents" + s) + (this.file ? "/" + this.file : "");
      } else {
        this.source = this.url;
      }
    }

    ResourceLocation.prototype.getGistId = function() {
      var h, p;
      this.query = this.search.slice(1);
      if (!this.query) {
        return null;
      }
      h = this.query.split("&");
      p = h != null ? h[0].split("=") : void 0;
      return this.gistId = p.length && p[0] === "gist" ? p[1] : null;
    };

    return ResourceLocation;

  })();

  Resource = (function() {

    function Resource(spec) {
      var _ref, _ref1;
      this.spec = spec;
      this.location = (_ref = this.spec.location) != null ? _ref : new ResourceLocation(this.spec.url);
      this.url = this.location.url;
      this.fileExt = (_ref1 = this.spec.fileExt) != null ? _ref1 : this.location.fileExt;
      this.id = this.spec.id;
      this.loaded = false;
      this.head = document.head;
      this.containers = new ResourceContainers(this);
    }

    Resource.prototype.load = function(callback, type) {
      var process, success, thisHost, url,
        _this = this;
      if (type == null) {
        type = "text";
      }
      if (this.spec.gistSource) {
        this.content = this.spec.gistSource;
        this.postLoad(callback);
        return;
      }
      thisHost = window.location.hostname;
      if (this.location.host !== thisHost && this.location.apiUrl) {
        url = this.location.apiUrl;
        type = "json";
        process = function(data) {
          var content;
          content = data.content.replace(/\s/g, '');
          return atob(content);
        };
      } else {
        url = this.url + ("?t=" + (Date.now()));
        process = null;
      }
      success = function(data) {
        _this.content = process ? process(data) : data;
        return _this.postLoad(callback);
      };
      return $.get(url, success, type);
    };

    Resource.prototype.postLoad = function(callback) {
      this.loaded = true;
      return typeof callback === "function" ? callback() : void 0;
    };

    Resource.prototype.isType = function(type) {
      return this.fileExt === type;
    };

    Resource.prototype.setContent = function(content) {
      this.content = content;
      return this.containers.setEditorContent(this.content);
    };

    Resource.prototype.setFromEditor = function(editor) {
      this.content = editor.code();
      return this.containers.setFromEditor(editor);
    };

    Resource.prototype.update = function(content) {
      this.content = content;
      return console.log("No update method for " + this.url);
    };

    Resource.prototype.updateFromContainers = function() {
      return this.containers.updateResource();
    };

    Resource.prototype.hasEval = function() {
      return this.containers.evals().length;
    };

    Resource.prototype.render = function() {
      return this.containers.render();
    };

    Resource.prototype.getEvalContainer = function() {
      return this.containers.getEvalContainer();
    };

    Resource.prototype.inBlab = function() {
      return this.location.inBlab;
    };

    Resource.typeFilter = function(types) {
      return function(resource) {
        var type, _i, _len;
        if (typeof types === "string") {
          return resource.isType(types);
        } else {
          for (_i = 0, _len = types.length; _i < _len; _i++) {
            type = types[_i];
            if (resource.isType(type)) {
              return true;
            }
          }
          return false;
        }
      };
    };

    return Resource;

  })();

  ResourceContainers = (function() {

    ResourceContainers.prototype.fileContainerAttr = "data-file";

    ResourceContainers.prototype.evalContainerAttr = "data-eval";

    function ResourceContainers(resource) {
      this.resource = resource;
      this.url = this.resource.url;
    }

    ResourceContainers.prototype.render = function() {
      var file, idx, node, _i, _len, _ref, _ref1, _results;
      this.fileNodes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.files();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(new Ace.EditorNode($(node), this.resource));
        }
        return _results;
      }).call(this);
      this.evalNodes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.evals();
        _results = [];
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          node = _ref[idx];
          _results.push(new Ace.EvalNode($(node), this.resource, this.fileNodes[idx]));
        }
        return _results;
      }).call(this);
      if ((_ref = $pz.codeNode) == null) {
        $pz.codeNode = {};
      }
      _ref1 = this.files;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        file = _ref1[_i];
        _results.push($pz.codeNode[file.editor.id] = file.editor);
      }
      return _results;
    };

    ResourceContainers.prototype.getEvalContainer = function() {
      var _ref;
      if (((_ref = this.evalNodes) != null ? _ref.length : void 0) !== 1) {
        return null;
      }
      return this.evalNodes[0].container;
    };

    ResourceContainers.prototype.setEditorContent = function(content) {
      var node, triggerChange, _i, _len, _ref, _results;
      triggerChange = false;
      _ref = this.fileNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(node.setCode(triggerChange));
      }
      return _results;
    };

    ResourceContainers.prototype.setFromEditor = function(editor) {
      var node, triggerChange, _i, _len, _ref, _results;
      triggerChange = false;
      _ref = this.fileNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (node.editor.id !== editor.id) {
          _results.push(node.setCode(triggerChange));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ResourceContainers.prototype.updateResource = function() {
      if (!this.fileNodes.length) {
        return;
      }
      if (this.fileNodes.length > 1) {
        console.log("Multiple editor nodes for resource.  Updating resource from only first editor node.", this.resource);
      }
      return this.resource.update(this.fileNodes[0].code());
    };

    ResourceContainers.prototype.files = function() {
      return $("div[" + this.fileContainerAttr + "='" + this.url + "']");
    };

    ResourceContainers.prototype.evals = function() {
      return $("div[" + this.evalContainerAttr + "='" + this.url + "']");
    };

    return ResourceContainers;

  })();

  EditorContainer = (function() {

    function EditorContainer(resource, div) {
      this.resource = resource;
      this.div = div;
      this.node = new Ace.EditorNode(this.div, this.resource);
    }

    EditorContainer.prototype.updateResource = function() {
      return this.resource.update(this.node.code());
    };

    return EditorContainer;

  })();

  EvalContainer = (function() {

    function EvalContainer(resource, div) {
      this.resource = resource;
      this.div = div;
      this.node = new Ace.EvalNode(this.div, this.resource);
    }

    EvalContainer.prototype.getContainer = function() {
      return this.node.container;
    };

    return EvalContainer;

  })();

  HtmlResource = (function(_super) {

    __extends(HtmlResource, _super);

    function HtmlResource() {
      return HtmlResource.__super__.constructor.apply(this, arguments);
    }

    HtmlResource.prototype.update = function(content) {
      this.content = content;
      return $pz.renderHtml();
    };

    return HtmlResource;

  })(Resource);

  ResourceInline = (function(_super) {

    __extends(ResourceInline, _super);

    function ResourceInline() {
      return ResourceInline.__super__.constructor.apply(this, arguments);
    }

    ResourceInline.prototype.load = function(callback) {
      var _this = this;
      return ResourceInline.__super__.load.call(this, function() {
        _this.createElement();
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    ResourceInline.prototype.createElement = function() {
      this.element = $("<" + this.tag + ">", {
        type: this.mime,
        "data-url": this.url
      });
      return this.element.text(this.content);
    };

    ResourceInline.prototype.inDom = function() {
      return $("" + this.tag + "[data-url='" + this.url + "']").length;
    };

    ResourceInline.prototype.appendToHead = function() {
      if (!this.inDom()) {
        return this.head.appendChild(this.element[0]);
      }
    };

    ResourceInline.prototype.update = function(content) {
      this.content = content;
      this.head.removeChild(this.element[0]);
      this.createElement();
      return this.appendToHead();
    };

    return ResourceInline;

  })(Resource);

  CssResourceInline = (function(_super) {

    __extends(CssResourceInline, _super);

    function CssResourceInline() {
      return CssResourceInline.__super__.constructor.apply(this, arguments);
    }

    CssResourceInline.prototype.tag = "style";

    CssResourceInline.prototype.mime = "text/css";

    return CssResourceInline;

  })(ResourceInline);

  CssResourceLinked = (function(_super) {

    __extends(CssResourceLinked, _super);

    function CssResourceLinked() {
      return CssResourceLinked.__super__.constructor.apply(this, arguments);
    }

    CssResourceLinked.prototype.load = function(callback) {
      var t,
        _this = this;
      this.style = document.createElement("link");
      this.style.setAttribute("type", "text/css");
      this.style.setAttribute("rel", "stylesheet");
      t = Date.now();
      this.style.setAttribute("href", this.url);
      setTimeout((function() {
        return _this.postLoad(callback);
      }), 0);
      return this.head.appendChild(this.style);
    };

    return CssResourceLinked;

  })(Resource);

  JsResourceInline = (function(_super) {

    __extends(JsResourceInline, _super);

    function JsResourceInline() {
      return JsResourceInline.__super__.constructor.apply(this, arguments);
    }

    JsResourceInline.prototype.tag = "script";

    JsResourceInline.prototype.mime = "text/javascript";

    return JsResourceInline;

  })(ResourceInline);

  JsResourceLinked = (function(_super) {

    __extends(JsResourceLinked, _super);

    function JsResourceLinked() {
      return JsResourceLinked.__super__.constructor.apply(this, arguments);
    }

    JsResourceLinked.prototype.load = function(callback) {
      var cache, t,
        _this = this;
      this.script = document.createElement("script");
      this.script.setAttribute("type", "text/javascript");
      this.head.appendChild(this.script);
      this.script.onload = function() {
        return _this.postLoad(callback);
      };
      t = Date.now();
      cache = this.url.indexOf("/puzlet/js") !== -1 || this.url.indexOf("http://") !== -1;
      return this.script.setAttribute("src", this.url + (cache ? "" : "?t=" + t));
    };

    return JsResourceLinked;

  })(Resource);

  CoffeeResource = (function(_super) {

    __extends(CoffeeResource, _super);

    function CoffeeResource() {
      return CoffeeResource.__super__.constructor.apply(this, arguments);
    }

    CoffeeResource.prototype.load = function(callback) {
      var _this = this;
      return CoffeeResource.__super__.load.call(this, function() {
        _this.Compiler = _this.hasEval() ? CoffeeCompilerEval : CoffeeCompiler;
        _this.compiler = new _this.Compiler(_this.location);
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    CoffeeResource.prototype.compile = function() {
      $blab.evaluatingResource = this;
      this.compiler.compile(this.content);
      this.resultStr = this.compiler.resultStr;
      return $.event.trigger("compiledCoffeeScript", {
        url: this.url
      });
    };

    CoffeeResource.prototype.update = function(content) {
      this.content = content;
      return this.compile();
    };

    return CoffeeResource;

  })(Resource);

  JsonResource = (function(_super) {

    __extends(JsonResource, _super);

    function JsonResource() {
      return JsonResource.__super__.constructor.apply(this, arguments);
    }

    return JsonResource;

  })(Resource);

  ResourceFactory = (function() {

    ResourceFactory.prototype.resourceTypes = {
      html: {
        all: HtmlResource
      },
      css: {
        blab: CssResourceInline,
        ext: CssResourceLinked,
        api: CssResourceInline
      },
      js: {
        blab: JsResourceInline,
        ext: JsResourceLinked,
        api: JsResourceInline
      },
      coffee: {
        all: CoffeeResource
      },
      json: {
        all: JsonResource
      },
      py: {
        all: Resource
      },
      m: {
        all: Resource
      },
      svg: {
        all: Resource
      },
      txt: {
        all: Resource
      }
    };

    function ResourceFactory(blabLocation, getGistSource) {
      this.blabLocation = blabLocation;
      this.getGistSource = getGistSource;
    }

    ResourceFactory.prototype.create = function(spec) {
      var fileExt, location, resource, subTypes, subtype, url, _ref;
      if (this.checkExists(spec)) {
        return null;
      }
      if (spec.url) {
        url = spec.url;
      } else {
        _ref = this.extractUrl(spec), url = _ref.url, fileExt = _ref.fileExt;
      }
      url = this.modifyPuzletUrl(url);
      location = new ResourceLocation(url);
      if (fileExt == null) {
        fileExt = location.fileExt;
      }
      spec = {
        id: spec.id,
        location: location,
        fileExt: fileExt,
        gistSource: this.getGistSource(url)
      };
      subTypes = this.resourceTypes[fileExt];
      if (!subTypes) {
        return null;
      }
      if (subTypes.all != null) {
        resource = new subTypes.all(spec);
      } else {
        subtype = (function() {
          switch (false) {
            case !location.inBlab:
              return "blab";
            case !location.isGitHubApi:
              return "api";
            default:
              return "ext";
          }
        })();
        resource = new subTypes[subtype](spec);
      }
      return resource;
    };

    ResourceFactory.prototype.checkExists = function(spec) {
      var v, vars, x, z, _i, _len;
      v = spec["var"];
      if (!v) {
        return false;
      }
      vars = v != null ? v.split(".") : void 0;
      z = window;
      for (_i = 0, _len = vars.length; _i < _len; _i++) {
        x = vars[_i];
        z = z[x];
        if (!z) {
          return false;
        }
      }
      console.log("Not loading " + v + " - already exists");
      return true;
    };

    ResourceFactory.prototype.extractUrl = function(spec) {
      var fileExt, p, url, v;
      for (p in spec) {
        v = spec[p];
        url = v;
        fileExt = p;
      }
      return {
        url: url,
        fileExt: fileExt
      };
    };

    ResourceFactory.prototype.modifyPuzletUrl = function(url) {
      var puzletResource, puzletUrl, _ref, _ref1;
      puzletUrl = "http://puzlet.org";
      if ((_ref = this.puzlet) == null) {
        this.puzlet = document.querySelectorAll("[src='" + puzletUrl + "/puzlet/js/puzlet.js']").length ? puzletUrl : null;
      }
      puzletResource = (_ref1 = url.match("^/puzlet")) != null ? _ref1.length : void 0;
      if (puzletResource) {
        url = this.puzlet ? this.puzlet + url : "/puzlet" + url;
      }
      return url;
    };

    return ResourceFactory;

  })();

  Resources = (function() {

    function Resources(blabLocation) {
      var _this = this;
      this.blabLocation = blabLocation;
      this.resources = [];
      this.factory = new ResourceFactory(this.blabLocation, function(url) {
        return _this.getGistSource(url);
      });
      this.changed = false;
    }

    Resources.prototype.add = function(resourceSpecs) {
      var newResources, resource, spec, _i, _len;
      if (!resourceSpecs.length) {
        resourceSpecs = [resourceSpecs];
      }
      newResources = [];
      for (_i = 0, _len = resourceSpecs.length; _i < _len; _i++) {
        spec = resourceSpecs[_i];
        resource = this.factory.create(spec);
        if (!resource) {
          continue;
        }
        newResources.push(resource);
        this.resources.push(resource);
      }
      if (newResources.length === 1) {
        return newResources[0];
      } else {
        return newResources;
      }
    };

    Resources.prototype.load = function(filter, loaded) {
      var resource, resourceLoaded, resources, resourcesToLoad, _i, _len, _results,
        _this = this;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !resource.loaded && filter(resource);
      });
      if (resources.length === 0) {
        if (typeof loaded === "function") {
          loaded();
        }
        return;
      }
      resourcesToLoad = 0;
      resourceLoaded = function(resource) {
        resourcesToLoad--;
        if (resourcesToLoad === 0) {
          _this.appendToHead(filter);
          return typeof loaded === "function" ? loaded() : void 0;
        }
      };
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        resourcesToLoad++;
        _results.push(resource.load(function() {
          return resourceLoaded(resource);
        }));
      }
      return _results;
    };

    Resources.prototype.loadUnloaded = function(loaded) {
      return this.load((function() {
        return true;
      }), loaded);
    };

    Resources.prototype.appendToHead = function(filter) {
      var resource, resources, _i, _len, _results;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !(typeof resource.inDom === "function" ? resource.inDom() : void 0) && (resource.appendToHead != null) && filter(resource);
      });
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        _results.push(resource.appendToHead());
      }
      return _results;
    };

    Resources.prototype.select = function(filter) {
      var resource, _i, _len, _ref, _results;
      filter = this.filterFunction(filter);
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (filter(resource)) {
          _results.push(resource);
        }
      }
      return _results;
    };

    Resources.prototype.filterFunction = function(filter) {
      if (typeof filter === "function") {
        return filter;
      } else {
        return Resource.typeFilter(filter);
      }
    };

    Resources.prototype.find = function(id) {
      var f, resource,
        _this = this;
      f = function(p) {
        var r, _i, _len, _ref;
        _ref = _this.resources;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          if (r[p] === id) {
            return r;
          }
        }
        return null;
      };
      resource = f("id");
      if (resource) {
        return resource;
      }
      return resource = f("url");
    };

    Resources.prototype.getContent = function(id) {
      var content, resource;
      resource = this.find(id);
      if (resource) {
        content = resource.content;
        if (resource.fileExt === "json") {
          return JSON.parse(content);
        } else {
          return content;
        }
      } else {
        return null;
      }
    };

    Resources.prototype.getJSON = function(id) {
      var content;
      content = this.getContent(id);
      if (content) {
        return JSON.parse(content);
      }
    };

    Resources.prototype.loadJSON = function(url, callback) {
      var resource;
      resource = this.find(url);
      if (resource == null) {
        resource = this.add({
          url: url
        });
      }
      if (!resource) {
        return null;
      }
      return resource.load((function() {
        return typeof callback === "function" ? callback(resource.content) : void 0;
      }), "json");
    };

    Resources.prototype.render = function() {
      var resource, _i, _len, _ref, _results;
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        _results.push(resource.render());
      }
      return _results;
    };

    Resources.prototype.setGistResources = function(gistFiles) {
      this.gistFiles = gistFiles;
    };

    Resources.prototype.getGistSource = function(url) {
      var _ref, _ref1, _ref2;
      return (_ref = (_ref1 = this.gistFiles) != null ? (_ref2 = _ref1[url]) != null ? _ref2.content : void 0 : void 0) != null ? _ref : null;
    };

    Resources.prototype.updateFromContainers = function() {
      var resource, _i, _len, _ref, _results;
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (resource.edited) {
          _results.push(resource.updateFromContainers());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Resources;

  })();

  CoffeeCompiler = (function() {

    function CoffeeCompiler(location) {
      this.location = location;
      this.url = this.location.url;
      this.isMain = this.location.inBlab;
      this.head = document.head;
    }

    CoffeeCompiler.prototype.compile = function(content) {
      var js;
      this.content = content;
      console.log("Compile " + this.url);
      if (this.findScript()) {
        this.head.removeChild(this.element[0]);
      }
      this.element = $("<script>", {
        type: "text/javascript",
        "data-url": this.url
      });
      js = CoffeeEvaluator.compile(this.content, this.isMain);
      this.element.text(js);
      return this.head.appendChild(this.element[0]);
    };

    CoffeeCompiler.prototype.findScript = function() {
      return $("script[data-url='" + this.url + "']").length;
    };

    return CoffeeCompiler;

  })();

  CoffeeCompilerEval = (function() {

    CoffeeCompilerEval.prototype.lf = "\n";

    function CoffeeCompilerEval(location) {
      this.location = location;
      this.url = this.location.url;
      this.isMain = this.location.inBlab;
      this.evaluator = new CoffeeEvaluator;
    }

    CoffeeCompilerEval.prototype.compile = function(content) {
      var recompile;
      this.content = content;
      console.log("Compile " + this.url + " (for eval box)");
      recompile = true;
      this.resultArray = this.evaluator.process(this.content, this.isMain, recompile);
      this.result = this.evaluator.stringify(this.resultArray);
      return this.resultStr = this.result.join(this.lf) + this.plotLines();
    };

    CoffeeCompilerEval.prototype.plotLines = function() {
      var i, l, lfs, _i;
      l = this.evaluator.numPlotLines(this.resultArray);
      if (!(l > 0)) {
        return "";
      }
      lfs = "";
      for (i = _i = 1; 1 <= l ? _i <= l : _i >= l; i = 1 <= l ? ++_i : --_i) {
        lfs += this.lf;
      }
      return lfs;
    };

    CoffeeCompilerEval.prototype.findStr = function(str) {
      return this.evaluator.findStr(this.resultArray, str);
    };

    return CoffeeCompilerEval;

  })();

  CoffeeEvaluator = (function() {

    CoffeeEvaluator.prototype.noEvalStrings = [")", "]", "}", "\"\"\"", "else", "try", "catch", "finally", "alert", "console.log"];

    CoffeeEvaluator.prototype.lf = "\n";

    CoffeeEvaluator.compile = function(code, isMain, bare) {
      var js, _ref;
      if (isMain == null) {
        isMain = true;
      }
      if (bare == null) {
        bare = false;
      }
      if ((_ref = CoffeeEvaluator.blabCoffee) == null) {
        CoffeeEvaluator.blabCoffee = new BlabCoffee;
      }
      return js = CoffeeEvaluator.blabCoffee.compile(code, isMain, bare);
    };

    CoffeeEvaluator["eval"] = function(code, isMain, js) {
      if (isMain == null) {
        isMain = true;
      }
      if (js == null) {
        js = null;
      }
      if (!js) {
        js = CoffeeEvaluator.compile(code, isMain);
      }
      eval(js);
      return js;
    };

    function CoffeeEvaluator() {
      this.js = null;
    }

    CoffeeEvaluator.prototype.process = function(code, isMain, recompile) {
      var codeLines, compile, js, l, n, stringify;
      if (isMain == null) {
        isMain = true;
      }
      if (recompile == null) {
        recompile = true;
      }
      stringify = true;
      compile = recompile || !(this.evalLines && this.js);
      if (compile) {
        codeLines = code.split(this.lf);
        $blab.evaluator = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = codeLines.length; _i < _len; _i++) {
            l = codeLines[_i];
            _results.push(this.isComment(l) && stringify ? l : "");
          }
          return _results;
        }).call(this);
        this.evalLines = ((function() {
          var _i, _len, _results;
          _results = [];
          for (n = _i = 0, _len = codeLines.length; _i < _len; n = ++_i) {
            l = codeLines[n];
            _results.push((this.noEval(l) ? "" : "$blab.evaluator[" + n + "] = ") + l);
          }
          return _results;
        }).call(this)).join(this.lf);
        js = null;
      } else {
        js = this.js;
      }
      try {
        this.js = CoffeeEvaluator["eval"](this.evalLines, isMain, js);
      } catch (error) {
        console.log("eval error", error);
      }
      return $blab.evaluator;
    };

    CoffeeEvaluator.prototype.stringify = function(resultArray) {
      var e, result;
      return result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = resultArray.length; _i < _len; _i++) {
          e = resultArray[_i];
          _results.push(e === "" ? "" : (e && e.length && e[0] === "#" ? e : this.objEval(e)));
        }
        return _results;
      }).call(this);
    };

    CoffeeEvaluator.prototype.numPlotLines = function(resultArray) {
      var b, d, idx, n, numLines, _i, _len;
      n = null;
      numLines = resultArray.length;
      for (idx = _i = 0, _len = resultArray.length; _i < _len; idx = ++_i) {
        b = resultArray[idx];
        if ((typeof b === "string") && b.indexOf("eval_plot") !== -1) {
          n = idx;
        }
      }
      d = n ? n - numLines + 8 : 0;
      if (d && d > 0) {
        return d;
      } else {
        return 0;
      }
    };

    CoffeeEvaluator.prototype.findStr = function(resultArray, str) {
      var e, idx, p, _i, _len;
      p = null;
      for (idx = _i = 0, _len = resultArray.length; _i < _len; idx = ++_i) {
        e = resultArray[idx];
        if ((typeof e === "string") && e === str) {
          p = idx;
        }
      }
      return p;
    };

    CoffeeEvaluator.prototype.noEval = function(l) {
      var r, _i, _len, _ref;
      if ((l === null) || (l === "") || (l.length === 0) || (l[0] === " ") || (l[0] === "#") || (l.indexOf("#;") !== -1)) {
        return true;
      }
      _ref = this.noEvalStrings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (l.indexOf(r) === 0) {
          return true;
        }
      }
      return false;
    };

    CoffeeEvaluator.prototype.isComment = function(l) {
      return l.length && l[0] === "#" && (l.length < 3 || l.slice(0, 3) !== "###");
    };

    CoffeeEvaluator.prototype.objEval = function(e) {
      var line;
      try {
        line = $inspect2(e, {
          depth: 2
        });
        line = line.replace(/(\r\n|\n|\r)/gm, "");
        return line;
      } catch (error) {
        return "";
      }
    };

    return CoffeeEvaluator;

  })();

  window.CoffeeEvaluator = CoffeeEvaluator;

  GitHub = (function() {

    GitHub.prototype.ghApi = "https://api.github.com/repos/puzlet";

    GitHub.prototype.ghMembersApi = "https://api.github.com/orgs/puzlet/members";

    GitHub.prototype.api = "https://api.github.com/gists";

    function GitHub(resources) {
      var _this = this;
      this.resources = resources;
      this.blabLocation = this.resources.blabLocation;
      this.hostname = this.blabLocation.host;
      this.blabId = this.blabLocation.repo;
      this.gistId = this.blabLocation.gistId;
      this.setCredentials();
      $(document).on("saveGitHub", function() {
        _this.resources.updateFromContainers();
        return _this.save();
      });
    }

    GitHub.prototype.repoApiUrl = function(path) {
      return "" + this.ghApi + "/" + this.blabId + "/contents/" + path;
    };

    GitHub.prototype.loadResourceFromRepo = function(resource, callback) {
      var path, url,
        _this = this;
      path = resource.url;
      url = this.repoApiUrl(path);
      return $.get(url, function(data) {
        console.log("Loaded resource " + path + " from repo", data);
        return typeof callback === "function" ? callback(data) : void 0;
      });
    };

    GitHub.prototype.loadGist = function(callback) {
      var url,
        _this = this;
      if (!this.gistId) {
        this.data = null;
        if (typeof callback === "function") {
          callback();
        }
        return;
      }
      url = "" + this.api + "/" + this.gistId;
      return $.get(url, function(data) {
        _this.data = data;
        console.log("Gist loaded", _this.data);
        _this.resources.setGistResources(_this.data.files);
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    GitHub.prototype.save = function(callback) {
      var spec,
        _this = this;
      if (!this.credentialsForm) {
        spec = {
          blabId: this.blabId,
          setCredentials: function(username, key) {
            return _this.setCredentials(username, key);
          },
          isRepoMember: function(cb) {
            return _this.isRepoMember(cb);
          },
          updateRepo: function(callback) {
            return _this.commitChangedResourcesToRepo(callback);
          },
          saveAsGist: function(callback) {
            return _this.saveAsGist(callback);
          }
        };
        this.credentialsForm = new CredentialsForm(spec);
      }
      return this.credentialsForm.open();
    };

    GitHub.prototype.saveAsGist = function(callback) {
      var resource, resources, saved, _i, _len, _ref,
        _this = this;
      console.log("Save as Gist (" + (this.auth ? this.username : 'anonymous') + ")");
      resources = this.resources.select(function(resource) {
        return resource.inBlab();
      });
      this.files = {};
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        this.files[resource.url] = {
          content: resource.content
        };
      }
      saved = function() {
        var _j, _len1, _ref;
        _ref = _this.resources;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          resource = _ref[_j];
          resource.edited = false;
        }
        if (typeof callback === "function") {
          callback();
        }
        return $.event.trigger("codeSaved");
      };
      if (this.gistId && this.username) {
        if (((_ref = this.data.owner) != null ? _ref.login : void 0) === this.username) {
          return this.patch(this.ajaxData(), saved);
        } else {
          console.log("Fork...");
          return this.fork(function(data) {
            _this.gistId = data.id;
            return _this.patch(_this.ajaxData(), (function() {
              return _this.redirect();
            }));
          });
        }
      } else {
        return this.create();
      }
    };

    GitHub.prototype.ajaxData = function() {
      var ajaxData, ajaxDataObj;
      ajaxDataObj = {
        description: this.description(),
        "public": false,
        files: this.files
      };
      return ajaxData = JSON.stringify(ajaxDataObj);
    };

    GitHub.prototype.create = function() {
      var _this = this;
      return $.ajax({
        type: "POST",
        url: this.api,
        data: this.ajaxData(),
        beforeSend: function(xhr) {
          return _this.authBeforeSend(xhr);
        },
        success: function(data) {
          console.log("Created Gist", data);
          _this.gistId = data.id;
          if (_this.username) {
            return _this.setDescription(function() {
              return _this.redirect();
            });
          } else {
            return _this.redirect();
          }
        },
        dataType: "json"
      });
    };

    GitHub.prototype.patch = function(ajaxData, callback) {
      var _this = this;
      return $.ajax({
        type: "PATCH",
        url: "" + this.api + "/" + this.gistId,
        data: ajaxData,
        beforeSend: function(xhr) {
          return _this.authBeforeSend(xhr);
        },
        success: function(data) {
          console.log("Updated Gist", data);
          return typeof callback === "function" ? callback() : void 0;
        },
        dataType: "json"
      });
    };

    GitHub.prototype.fork = function(callback) {
      var _this = this;
      return $.ajax({
        type: "POST",
        url: "" + this.api + "/" + this.gistId + "/forks",
        beforeSend: function(xhr) {
          return _this.authBeforeSend(xhr);
        },
        success: function(data) {
          console.log("Forked Gist", data);
          return typeof callback === "function" ? callback(data) : void 0;
        },
        dataType: "json"
      });
    };

    GitHub.prototype.commitChangedResourcesToRepo = function(callback) {
      var commit, maxIdx, resources,
        _this = this;
      if (!(this.hostname === "puzlet.org" || this.hostname === "localhost" && this.username && this.key)) {
        console.log("Can commit changes only to puzlet.org repo, and only with credentials.");
        return;
      }
      resources = this.resources.select(function(resource) {
        return resource.edited;
      });
      console.log("resources", resources);
      if (!resources.length) {
        return;
      }
      maxIdx = resources.length - 1;
      commit = function(idx) {
        var resource;
        if (idx > maxIdx) {
          if (typeof callback === "function") {
            callback();
          }
          $.event.trigger("codeSaved");
          return;
        }
        resource = resources[idx];
        return _this.loadResourceFromRepo(resource, function(data) {
          resource.sha = data.sha;
          return _this.commitResourceToRepo(resource, function() {
            resource.edited = false;
            return commit(idx + 1);
          });
        });
      };
      return commit(0);
    };

    GitHub.prototype.commitResourceToRepo = function(resource, callback) {
      var ajaxData, path, url,
        _this = this;
      path = resource.url;
      url = this.repoApiUrl(path);
      ajaxData = {
        message: "Puzlet commit",
        path: path,
        content: btoa(resource.content),
        sha: resource.sha
      };
      return $.ajax({
        type: "PUT",
        url: url,
        data: JSON.stringify(ajaxData),
        beforeSend: function(xhr) {
          return _this.authBeforeSend(xhr);
        },
        success: function(data) {
          console.log("Updated repo file", data);
          return typeof callback === "function" ? callback(data) : void 0;
        },
        dataType: "json"
      });
    };

    GitHub.prototype.setDescription = function(callback) {
      var ajaxData;
      ajaxData = JSON.stringify({
        description: this.description()
      });
      return this.patch(ajaxData, callback);
    };

    GitHub.prototype.description = function() {
      var description;
      description = document.title;
      if (this.gistId) {
        return description += " [http://puzlet.org?gist=" + this.gistId + "]";
      }
    };

    GitHub.prototype.redirect = function() {
      var blabUrl;
      blabUrl = window.location + ("?gist=" + this.gistId);
      return window.location = blabUrl;
    };

    GitHub.prototype.getRepoMembers = function(callback) {
      var _this = this;
      return $.ajax({
        type: "GET",
        url: this.ghMembersApi,
        beforeSend: function(xhr) {
          return _this.authBeforeSend(xhr);
        },
        success: function(data) {
          return typeof callback === "function" ? callback(data) : void 0;
        },
        dataType: "json"
      });
    };

    GitHub.prototype.isRepoMember = function(callback) {
      var found, set, _ref,
        _this = this;
      if ((_ref = this.cacheIsRepoMember) == null) {
        this.cacheIsRepoMember = {};
      }
      if (this.cacheIsRepoMember[this.username] != null) {
        callback(this.cacheIsRepoMember[this.username]);
      }
      set = function(isMember) {
        if (_this.username) {
          _this.cacheIsRepoMember[_this.username] = isMember;
        }
        return callback(isMember);
      };
      if (!(this.blabId && this.username && this.key)) {
        set(false);
        return;
      }
      found = false;
      this.getRepoMembers(function(members) {
        var member, _i, _len;
        for (_i = 0, _len = members.length; _i < _len; _i++) {
          member = members[_i];
          found = _this.username === member.login;
          if (found) {
            set(true);
            return;
          }
        }
      });
      return set(false);
    };

    GitHub.prototype.setCredentials = function(username, key) {
      var make_base_auth,
        _this = this;
      this.username = username;
      this.key = key;
      make_base_auth = function(user, password) {
        var hash, tok;
        tok = user + ':' + password;
        hash = btoa(tok);
        return "Basic " + hash;
      };
      if (this.username && this.key) {
        this.auth = make_base_auth(this.username, this.key);
        return this.authBeforeSend = function(xhr) {
          return xhr.setRequestHeader('Authorization', _this.auth);
        };
      } else {
        return this.authBeforeSend = function(xhr) {};
      }
    };

    return GitHub;

  })();

  CredentialsForm = (function() {

    function CredentialsForm(spec) {
      var _this = this;
      this.spec = spec;
      this.blabId = this.spec.blabId;
      this.username = $.cookie("gh_user");
      this.key = $.cookie("gh_key");
      this.dialog = $("<div>", {
        id: "github_save_dialog",
        title: "Save immediately, or enter credentials."
      });
      this.dialog.dialog({
        autoOpen: false,
        height: 500,
        width: 500,
        modal: true,
        close: function() {
          return _this.form[0].reset();
        }
      });
      this.spec.setCredentials(this.username, this.key);
      this.setButtons();
      this.form = $("<form>", {
        id: "github_save_form",
        submit: function(evt) {
          return evt.preventDefault();
        }
      });
      this.dialog.append(this.form);
      this.usernameField();
      this.keyField();
      this.infoText();
      this.saving = $("<p>", {
        text: "Saving...",
        css: {
          fontSize: "16pt",
          color: "green"
        }
      });
      this.dialog.append(this.saving);
      this.saving.hide();
    }

    CredentialsForm.prototype.open = function() {
      this.usernameInput.val(this.username);
      this.keyInput.val(this.key);
      this.setButtons();
      return this.dialog.dialog("open");
    };

    CredentialsForm.prototype.usernameField = function() {
      var id, label,
        _this = this;
      id = "username";
      label = $("<label>", {
        "for": id,
        text: "Username"
      });
      this.usernameInput = $("<input>", {
        name: "username",
        id: id,
        value: this.username,
        "class": "text ui-widget-content ui-corner-all",
        change: function() {
          return _this.setCredentials();
        }
      });
      return this.form.append(label).append(this.usernameInput);
    };

    CredentialsForm.prototype.keyField = function() {
      var id, label,
        _this = this;
      id = "key";
      label = $("<label>", {
        "for": id,
        text: "Personal access token"
      });
      this.keyInput = $("<input>", {
        type: "password",
        name: "key",
        id: id,
        value: this.key,
        "class": "text ui-widget-content ui-corner-all",
        change: function() {
          return _this.setCredentials();
        }
      });
      return this.form.append(label).append(this.keyInput);
    };

    CredentialsForm.prototype.infoText = function() {
      return this.dialog.append("<br>\n<p>To save under your GitHub account, enter your GitHub username and personal access token.\nYou can generate your personal access token <a href='https://github.com/settings/applications' target='_blank'>here</a>.\n</p>\n<p>\nTo save as <i>anonymous</i> Gist, continue without credentials.\n</p>\n<p>\nYour GitHub username and personal access token will be saved as cookies for future saves.\nTo remove these cookies, clear the credentials above.\n</p>");
    };

    CredentialsForm.prototype.setCredentials = function() {
      console.log("Setting credentials and updating cookies");
      this.username = this.usernameInput.val() !== "" ? this.usernameInput.val() : null;
      this.key = this.keyInput.val() !== "" ? this.keyInput.val() : null;
      $.cookie("gh_user", this.username);
      $.cookie("gh_key", this.key);
      this.spec.setCredentials(this.username, this.key);
      return this.setButtons();
    };

    CredentialsForm.prototype.setButtons = function() {
      var buttons, done, saveAction, sel, _base,
        _this = this;
      saveAction = function() {
        _this.setCredentials();
        return _this.saving.show();
      };
      done = function() {
        _this.saving.hide();
        _this.form[0].reset();
        return _this.dialog.dialog("close");
      };
      buttons = {
        "Update repo": function() {
          saveAction();
          return _this.spec.updateRepo(function() {
            return done();
          });
        },
        "Save as Gist": function() {
          saveAction();
          return _this.spec.saveAsGist(function() {
            return done();
          });
        },
        Cancel: function() {
          return _this.dialog.dialog("close");
        }
      };
      sel = function(n) {
        var idx, o, p, v;
        o = {};
        idx = 0;
        for (p in buttons) {
          v = buttons[p];
          if (idx >= n) {
            o[p] = v;
          }
          idx++;
        }
        return o;
      };
      this.dialog.dialog({
        buttons: sel(1)
      });
      return typeof (_base = this.spec).isRepoMember === "function" ? _base.isRepoMember(function(isMember) {
        if (isMember) {
          return _this.dialog.dialog({
            buttons: sel(0)
          });
        }
      }) : void 0;
    };

    return CredentialsForm;

  })();

  SaveButton = (function() {

    function SaveButton(container, callback) {
      var _this = this;
      this.container = container;
      this.callback = callback;
      this.div = $("<div>", {
        id: "save_button_container",
        css: {
          position: "fixed",
          top: 10,
          right: 10
        }
      });
      this.b = $("<button>", {
        click: function() {
          _this.b.hide();
          return typeof _this.callback === "function" ? _this.callback() : void 0;
        },
        title: "When you're done editing, save your changes to GitHub."
      });
      this.b.button({
        label: "Save"
      });
      this.savingMessage = $("<span>", {
        css: {
          top: 20,
          color: "#2a2",
          cursor: "default"
        },
        text: "Saving..."
      });
      this.div.append(this.b).append(this.savingMessage);
      this.container.append(this.div);
      this.b.hide();
      this.savingMessage.hide();
      $(document).on("codeNodeChanged", function() {
        return _this.b.show();
      });
    }

    SaveButton.prototype.saving = function() {
      this.b.hide();
      return this.savingMessage.show();
    };

    return SaveButton;

  })();

  Ace = {};

  Ace.Node = (function() {

    function Node(container, resource) {
      this.container = container;
      this.resource = resource;
      this.getSpec();
      this.create();
      this.renderTId = null;
    }

    Node.prototype.getSpec = function() {
      if (!this.resource) {
        return;
      }
      this.filename = this.resource.url;
      this.lang = Ace.Languages.langName(this.resource.fileExt);
      return this.spec = {
        container: this.container,
        filename: this.filename,
        lang: this.lang
      };
    };

    Node.prototype.create = function() {};

    Node.prototype.code = function() {
      return this.editor.code();
    };

    Node.prototype.setCode = function(triggerChange) {
      var _this = this;
      if (triggerChange == null) {
        triggerChange = true;
      }
      if (this.renderTId) {
        clearTimeout(this.renderTId);
      }
      this.editor.set(this.resource.content, triggerChange);
      return this.renderTId = setTimeout((function() {
        return _this.editor.customRenderer.render();
      }), 1000);
    };

    return Node;

  })();

  Ace.EditorNode = (function(_super) {

    __extends(EditorNode, _super);

    function EditorNode() {
      return EditorNode.__super__.constructor.apply(this, arguments);
    }

    EditorNode.prototype.getSpec = function() {
      var _this = this;
      EditorNode.__super__.getSpec.call(this);
      if (!this.resource) {
        return;
      }
      this.spec.code = this.resource.content;
      this.getAttributes();
      this.spec.startLine = this.startLine;
      this.spec.endLine = this.endLine;
      this.spec.viewPort = this.viewPort;
      return this.spec.update = function(code) {
        var _base;
        return typeof (_base = _this.resource).update === "function" ? _base.update(code) : void 0;
      };
    };

    EditorNode.prototype.create = function() {
      var Editor, _ref,
        _this = this;
      Editor = (_ref = Ace.Languages.get(this.spec.lang).Editor) != null ? _ref : Ace.Editor;
      this.editor = new Editor(this.spec);
      return this.editor.onChange(function() {
        _this.resource.setFromEditor(_this.editor);
        _this.resource.edited = true;
        return $.event.trigger("codeNodeChanged");
      });
    };

    EditorNode.prototype.getAttributes = function() {
      var data, lines, numLines, _ref, _ref1, _ref2, _ref3,
        _this = this;
      lines = this.resource.content.split("\n");
      numLines = lines.length;
      data = function(name) {
        return _this.container.data(name);
      };
      this.startMatch = data("start-match");
      this.endMatch = data("end-match");
      this.startLine = (_ref = this.match(lines, this.startMatch)) != null ? _ref : (_ref1 = data("start-line")) != null ? _ref1 : 1;
      this.endLine = (_ref2 = this.match(lines, this.endMatch)) != null ? _ref2 : (_ref3 = data("end-line")) != null ? _ref3 : numLines;
      return this.viewPort = this.startLine > 1 || this.endLine < numLines;
    };

    EditorNode.prototype.match = function(lines, regex) {
      var idx, line, match, _i, _len;
      if (!((lines != null ? lines.length : void 0) && regex)) {
        return null;
      }
      for (idx = _i = 0, _len = lines.length; _i < _len; idx = ++_i) {
        line = lines[idx];
        match = line.match(regex);
        if (match) {
          return idx + 1;
        }
      }
      return null;
    };

    return EditorNode;

  })(Ace.Node);

  Ace.EvalNode = (function(_super) {

    __extends(EvalNode, _super);

    function EvalNode(container, resource, fileNode) {
      this.container = container;
      this.resource = resource;
      this.fileNode = fileNode;
      EvalNode.__super__.constructor.call(this, this.container, this.resource);
    }

    EvalNode.prototype.getSpec = function() {
      EvalNode.__super__.getSpec.call(this);
      this.spec.startLine = this.fileNode.spec.startLine;
      this.spec.endLine = this.fileNode.spec.endLine;
      return this.spec.viewPort = this.fileNode.spec.viewPort;
    };

    EvalNode.prototype.create = function() {
      var _this = this;
      if (this.lang !== "coffee") {
        console.log("<div data-eval='" + this.filename + "'>: must be CoffeeScript.");
        return;
      }
      this.editor = new CoffeeEval(this.spec);
      this.setCode();
      return $(document).on("compiledCoffeeScript", function(ev, data) {
        if (data.url === _this.filename) {
          return _this.setCode();
        }
      });
    };

    EvalNode.prototype.setCode = function() {
      return this.editor.set(this.resource.resultStr);
    };

    return EvalNode;

  })(Ace.Node);

  Ace.Editor = (function() {

    Editor.prototype.idPrefix = "ace_editor_";

    Editor.count = 0;

    function Editor(spec) {
      var _this = this;
      this.spec = spec;
      this.filename = this.spec.filename;
      this.lang = this.spec.lang;
      Ace.Editor.count++;
      this.id = this.idPrefix + this.filename + ("_" + this.spec.startLine + "_" + this.spec.endLine) + ("_" + Ace.Editor.count);
      this.fixedNumLines = this.spec.viewPort ? this.spec.endLine - this.spec.startLine + 1 : null;
      this.initContainer();
      this.editor = ace.edit(this.id);
      this.initMode();
      this.initRenderer();
      this.initFont();
      this.editor.$blockScrolling = Infinity;
      this.set(this.spec.code);
      this.setEditable();
      this.initChangeListeners();
      this.keyboardShortcuts();
      this.onSwipe(function() {
        return _this.run();
      });
      this.customRenderer = new Ace.CustomRenderer(this, (function() {
        return _this.setViewPort();
      }));
      this.setViewPort();
    }

    Editor.prototype.initContainer = function() {
      this.container = this.spec.container;
      this.container.addClass("code_node_container");
      this.container.addClass("tex2jax_ignore");
      this.outer = $("<div>", {
        "class": "code_node_editor_container"
      });
      this.editorContainer = $("<div>", {
        "class": "code_node_editor",
        id: this.id,
        "data-lang": "" + this.lang
      });
      this.outer.append(this.editorContainer);
      return this.container.append(this.outer);
    };

    Editor.prototype.onSwipe = function(callback) {
      var down, listener, move, pos, start,
        _this = this;
      down = null;
      pos = function(evt) {
        var t;
        t = evt.touches[0];
        return {
          x: t.clientX,
          y: t.clientY
        };
      };
      start = function(evt) {
        return down = pos(evt);
      };
      move = function(evt) {
        var d, up;
        if (!down) {
          return;
        }
        up = pos(evt);
        d = {
          x: up.x - down.x,
          y: up.y - down.y
        };
        if (Math.abs(d.x) > Math.abs(d.y) && d.x > 0) {
          if (typeof callback === "function") {
            callback();
          }
        }
        return down = null;
      };
      listener = function(e, f) {
        return _this.editorContainer[0].addEventListener(e, f, false);
      };
      listener("touchstart", start);
      return listener("touchmove", move);
    };

    Editor.prototype.initMode = function() {
      var mode;
      this.editor.setTheme("ace/theme/textmate");
      if (this.lang) {
        mode = Ace.Languages.mode(this.lang);
      }
      if (mode) {
        return this.session().setMode(mode);
      }
    };

    Editor.prototype.initRenderer = function() {
      var _this = this;
      this.renderer = this.editor.renderer;
      this.renderer.scrollBar.setWidth = function(width) {
        if (width == null) {
          width = this.width || 15;
        }
        return $(this.element).css("width", width + "px");
      };
      this.renderer.scrollBar.setWidth(0);
      this.renderer.scroller.style.overflowX = "hidden";
      this.renderer.$textLayer.addEventListener("changeCharacterSize", function() {
        return _this.setHeight();
      });
      this.renderer.$gutterLayer.setShowLineNumbers = function(show, start) {
        if (start == null) {
          start = 1;
        }
        this.showLineNumbers = show;
        return this.lineNumberStart = start;
      };
      this.renderer.$gutterLayer.setShowLineNumbers(true, 1);
      return this.editor.setShowFoldWidgets(false);
    };

    Editor.prototype.initFont = function() {
      var char, css;
      this.editorContainer.addClass("pz_ace_editor");
      css = {
        fontFamily: "Consolas, Menlo, DejaVu Sans Mono, Monaco, monospace",
        fontSize: "11pt",
        lineHeight: "150%"
      };
      char = $("<span>", {
        css: css,
        html: "m"
      });
      $("body").append(char);
      this.charWidth = char.width();
      char.remove();
      this.narrowFont = this.charWidth < 9;
      if (this.narrowFont) {
        css.fontSize = "12pt";
      }
      return this.editorContainer.css(css);
    };

    Editor.prototype.setViewPort = function() {
      var endLine, height, line, lines, numLines, startLine, _i, _results;
      if (!this.spec.viewPort) {
        return;
      }
      startLine = this.spec.startLine;
      endLine = this.spec.endLine;
      height = endLine - startLine + 1;
      this.setHeight(height);
      if (startLine > 1) {
        this.editor.gotoLine(startLine - 1);
        this.editor.scrollToLine(startLine - 1);
      }
      lines = this.code().split("\n");
      numLines = lines.length;
      _results = [];
      for (line = _i = 1; 1 <= numLines ? _i <= numLines : _i >= numLines; line = 1 <= numLines ? ++_i : --_i) {
        if (line < startLine || line > endLine) {
          _results.push(this.session().addGutterDecoration(line - 1, "ace_light_line_numbers"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Editor.prototype.setHeight = function(numLines) {
      var heightStr, l, lengths, lineHeight, lines, max;
      if (numLines == null) {
        numLines = null;
      }
      if (!this.editor) {
        return;
      }
      lineHeight = this.renderer.lineHeight;
      if (numLines == null) {
        numLines = this.fixedNumLines;
      }
      if (!numLines) {
        lines = this.code().split("\n");
        numLines = lines.length;
        if (numLines < 20) {
          lengths = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lines.length; _i < _len; _i++) {
              l = lines[_i];
              _results.push(l.length);
            }
            return _results;
          })();
          max = Math.max.apply(Math, lengths);
          if (max > 75) {
            numLines++;
          }
        } else {
          numLines++;
        }
      }
      if (this.numLines === numLines && this.lineHeight === lineHeight) {
        return;
      }
      this.numLines = numLines;
      this.lineHeight = lineHeight;
      heightStr = lineHeight * (numLines > 0 ? numLines : 1) + "px";
      this.editorContainer.css("height", heightStr);
      this.outer.css("height", heightStr);
      return this.editor.resize();
    };

    Editor.prototype.focus = function() {
      return this.editor.focus();
    };

    Editor.prototype.session = function() {
      if (this.editor) {
        return this.editor.getSession();
      } else {
        return null;
      }
    };

    Editor.prototype.code = function() {
      return this.session().getValue();
    };

    Editor.prototype.set = function(code, triggerChange, setEditorView) {
      if (triggerChange == null) {
        triggerChange = true;
      }
      if (setEditorView == null) {
        setEditorView = true;
      }
      if (!triggerChange) {
        this.enableChangeAction = false;
      }
      if (!this.editor) {
        return;
      }
      this.session().setValue(code);
      if (setEditorView) {
        if (this.spec.viewPort) {
          this.setViewPort();
        } else {
          this.setHeight();
        }
      }
      return this.enableChangeAction = true;
    };

    Editor.prototype.show = function(show) {
      return this.outer.css("display", show ? "" : "none");
    };

    Editor.prototype.showCode = function(show) {
      this.editor.show(show);
      if (show) {
        return this.editor.resize();
      }
    };

    Editor.prototype.setEditable = function(editable) {
      if (editable == null) {
        editable = true;
      }
      this.isEditable = editable;
      this.editor.setReadOnly(!editable);
      return this.editor.setHighlightActiveLine(false);
    };

    Editor.prototype.initChangeListeners = function() {
      var changeAction,
        _this = this;
      this.enableChangeAction = true;
      changeAction = function() {
        var code, listener, _i, _len, _ref, _results;
        _this.setHeight();
        code = _this.code();
        _ref = _this.changeListeners;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener(code));
        }
        return _results;
      };
      this.session().on("change", function() {
        if (_this.enableChangeAction) {
          return changeAction();
        }
      });
      return this.changeListeners = [];
    };

    Editor.prototype.onChange = function(f) {
      return this.changeListeners.push(f);
    };

    Editor.prototype.run = function() {
      this.spec.update(this.code());
      return $.event.trigger("runCode");
    };

    Editor.prototype.keyboardShortcuts = function() {
      var command,
        _this = this;
      command = function(o) {
        return _this.editor.commands.addCommand(o);
      };
      command({
        name: "run",
        bindKey: {
          win: "Shift-Return",
          mac: "Shift-Return",
          sender: "editor"
        },
        exec: function(env, args, request) {
          return _this.run();
        }
      });
      return command({
        name: "save",
        bindKey: {
          win: "Ctrl-s",
          mac: "Ctrl-s",
          sender: "editor"
        },
        exec: function(env, args, request) {
          return $.event.trigger("saveGitHub");
        }
      });
    };

    return Editor;

  })();

  CoffeeEditor = (function(_super) {

    __extends(CoffeeEditor, _super);

    function CoffeeEditor(spec) {
      this.spec = spec;
      CoffeeEditor.__super__.constructor.call(this, this.spec);
    }

    return CoffeeEditor;

  })(Ace.Editor);

  CoffeeEval = (function(_super) {

    __extends(CoffeeEval, _super);

    CoffeeEval.prototype.idPrefix = "ace_eval_";

    function CoffeeEval(spec) {
      this.spec = spec;
      CoffeeEval.__super__.constructor.call(this, this.spec);
      this.container.css({
        position: "relative",
        border: "1px dashed black"
      });
      this.editorContainer.css({
        background: "white"
      });
      this.renderer.setShowGutter(false);
    }

    return CoffeeEval;

  })(Ace.Editor);

  Ace.Languages = (function() {

    function Languages() {}

    Languages.list = {
      html: {
        ext: "html",
        mode: "html"
      },
      css: {
        ext: "css",
        mode: "css"
      },
      javascript: {
        ext: "js",
        mode: "javascript"
      },
      coffee: {
        ext: "coffee",
        mode: "coffee",
        Editor: CoffeeEditor
      },
      json: {
        ext: "json",
        mode: "javascript"
      },
      python: {
        ext: "py",
        mode: "python"
      },
      octave: {
        ext: "m",
        mode: "matlab"
      },
      latex: {
        ext: "tex",
        mode: "latex"
      }
    };

    Languages.get = function(lang) {
      return Ace.Languages.list[lang];
    };

    Languages.mode = function(lang) {
      return "ace/mode/" + (Ace.Languages.get(lang).mode);
    };

    Languages.langName = function(ext) {
      var language, name, _ref;
      _ref = Ace.Languages.list;
      for (name in _ref) {
        language = _ref[name];
        if (language.ext === ext) {
          return name;
        }
      }
    };

    return Languages;

  })();

  Ace.path = "http://ajaxorg.github.io/ace-builds/src-min-noconflict";

  Ace.Resources = (function() {

    Resources.prototype.main = [
      {
        url: "" + Ace.path + "/ace.js"
      }
    ];

    Resources.prototype.modes = [
      {
        url: "" + Ace.path + "/mode-html.js"
      }, {
        url: "" + Ace.path + "/mode-css.js"
      }, {
        url: "" + Ace.path + "/mode-javascript.js"
      }, {
        url: "" + Ace.path + "/mode-coffee.js"
      }, {
        url: "" + Ace.path + "/mode-python.js"
      }, {
        url: "" + Ace.path + "/mode-matlab.js"
      }, {
        url: "" + Ace.path + "/mode-latex.js"
      }
    ];

    Resources.prototype.styles = [
      {
        url: "/puzlet/css/ace.css"
      }
    ];

    function Resources(load, loaded) {
      var _this = this;
      load(this.main, function() {
        return load(_this.modes, function() {
          return load(_this.styles, function() {
            _this.customStyles();
            return typeof loaded === "function" ? loaded() : void 0;
          });
        });
      });
    }

    Resources.prototype.customStyles = function() {
      var custom, head;
      custom = $("<style>", {
        type: "text/css",
        id: "puzlet_ace_custom_styles",
        html: ".ace-tm {\n	background: #f4f4f4;;\n}\n.ace-tm .ace_gutter {\n	color: #aaa;\n	background: #f8f8f8;\n}\n.ace_gutter-cell {\n	padding-left: 15px;\n	background: #eee;\n}\n.ace-tm .ace_print_margin {\n	background: #f0f0f0;\n}"
      });
      head = document.getElementsByTagName('head')[0];
      return head.appendChild(custom[0]);
    };

    return Resources;

  })();

  Ace.CustomRenderer = (function() {

    CustomRenderer.tempIdx = 0;

    function CustomRenderer(node, callback1, callback) {
      this.node = node;
      this.callback1 = callback1;
      this.callback = callback;
      this.editorContainer = this.node.editorContainer;
      this.editor = this.node.editor;
      this.renderer = this.node.renderer;
      this.isEditable = this.node.isEditable;
      this.customRendering();
    }

    CustomRenderer.prototype.customRendering = function() {
      var onBlur, onFocus,
        _this = this;
      this.linkSelected = false;
      this.comments = [];
      this.functions = [];
      this.inFocus = false;
      onFocus = this.editor.onFocus;
      this.editor.onFocus = function() {
        _this.restoreCode();
        onFocus.call(_this.editor);
        if (_this.isEditable) {
          _this.renderer.showCursor();
        }
        if (!_this.isEditable) {
          _this.renderer.hideCursor();
        }
        _this.editor.setHighlightActiveLine(true);
        return _this.inFocus = true;
      };
      onBlur = this.editor.onBlur;
      this.editor.onBlur = function() {
        _this.renderer.hideCursor();
        _this.editor.setHighlightActiveLine(false);
        _this.render();
        return _this.inFocus = false;
      };
      this.editor.on("mouseup", function(aceEvent) {
        return _this.mouseUpHandler();
      });
      return $(document).on("mathjaxPreConfig", function() {
        if (typeof _this.callback1 === "function") {
          _this.callback1();
        }
        return window.MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
          _this.render();
          return typeof _this.callback === "function" ? _this.callback() : void 0;
        });
      });
    };

    CustomRenderer.prototype.render = function() {
      var comment, commentNodes, f, i, identifiers, l, linkCallback, node, _i, _j, _len, _len1, _ref, _ref1, _results,
        _this = this;
      if (!window.MathJax) {
        return;
      }
      if (!$blab.codeDecoration) {
        return;
      }
      commentNodes = this.editorContainer.find(".ace_comment");
      linkCallback = function(target) {
        return _this.linkSelected = target;
      };
      this.comments = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commentNodes.length; _i < _len; _i++) {
          node = commentNodes[_i];
          _results.push(new CodeNodeComment($(node), linkCallback));
        }
        return _results;
      })();
      _ref = this.comments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comment = _ref[_i];
        comment.render();
      }
      identifiers = this.editorContainer.find(".ace_identifier");
      this.functions = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = identifiers.length; _j < _len1; _j++) {
          i = identifiers[_j];
          if (l = Ace.Identifiers.link($(i).text())) {
            _results.push(new CodeNodeFunction($(i), l, linkCallback));
          }
        }
        return _results;
      })();
      _ref1 = this.functions;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        _results.push(f.render());
      }
      return _results;
    };

    CustomRenderer.prototype.restoreCode = function() {
      var comment, f, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.comments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comment = _ref[_i];
        comment.restore();
      }
      _ref1 = this.functions;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        _results.push(f.restore());
      }
      return _results;
    };

    CustomRenderer.prototype.mouseUpHandler = function() {
      var href, target;
      if (!this.linkSelected) {
        return;
      }
      href = this.linkSelected.attr("href");
      target = this.linkSelected.attr("target");
      if (target === "_self") {
        $(document.body).animate({
          scrollTop: $(href).offset().top
        }, 1000);
      } else {
        window.open(href, target != null ? target : "_blank");
      }
      this.linkSelected = false;
      return this.editor.blur();
    };

    return CustomRenderer;

  })();

  Ace.Identifiers = (function() {

    function Identifiers() {}

    Identifiers.links = {};

    Identifiers.registerLinks = function(links) {
      var identifier, link, _results;
      _results = [];
      for (identifier in links) {
        link = links[identifier];
        _results.push(Ace.Identifiers.links[identifier] = link);
      }
      return _results;
    };

    Identifiers.link = function(name) {
      return Ace.Identifiers.links[name];
    };

    return Identifiers;

  })();

  CodeNodeComment = (function() {

    function CodeNodeComment(node, linkCallback) {
      this.node = node;
      this.linkCallback = linkCallback;
    }

    CodeNodeComment.prototype.render = function() {
      this.originalText = this.node.text();
      this.replaceDiv();
      this.mathJax();
      return this.processLinks();
    };

    CodeNodeComment.prototype.replaceDiv = function() {
      var comment, content, pattern, re;
      pattern = String.fromCharCode(160);
      re = new RegExp(pattern, "g");
      comment = this.originalText.replace(re, " ");
      this.node.empty();
      content = $("<div>", {
        css: {
          display: "inline-block"
        }
      });
      content.append(comment);
      return this.node.append(content);
    };

    CodeNodeComment.prototype.mathJax = function() {
      var node;
      if (!(node = this.node[0])) {
        return;
      }
      MathJax.Hub.Queue(["PreProcess", MathJax.Hub, node]);
      return MathJax.Hub.Queue(["Process", MathJax.Hub, node]);
    };

    CodeNodeComment.prototype.processLinks = function() {
      var link, links, _i, _len, _results,
        _this = this;
      links = this.node.find("a");
      if (!links.length) {
        return;
      }
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        _results.push($(link).mousedown(function(evt) {
          return _this.linkCallback($(evt.target));
        }));
      }
      return _results;
    };

    CodeNodeComment.prototype.restore = function() {
      if (this.originalText) {
        this.node.empty();
        return this.node.text(this.originalText);
      }
    };

    return CodeNodeComment;

  })();

  CodeNodeFunction = (function() {

    function CodeNodeFunction(node, link, linkCallback) {
      this.node = node;
      this.link = link;
      this.linkCallback = linkCallback;
    }

    CodeNodeFunction.prototype.render = function() {
      this.originalText = this.node.text();
      this.replaceDiv();
      return this.processLinks();
    };

    CodeNodeFunction.prototype.replaceDiv = function() {
      var content, link, txt;
      txt = this.originalText;
      link = $("<a>", {
        href: this.link.href,
        target: this.link.target,
        text: txt
      });
      this.node.empty();
      content = $("<div>", {
        css: {
          display: "inline-block"
        }
      });
      content.append(link);
      return this.node.append(content);
    };

    CodeNodeFunction.prototype.mathJax = function() {
      var node;
      if (!(node = this.node[0])) {
        return;
      }
      MathJax.Hub.Queue(["PreProcess", MathJax.Hub, node]);
      return MathJax.Hub.Queue(["Process", MathJax.Hub, node]);
    };

    CodeNodeFunction.prototype.processLinks = function() {
      var link, links, _i, _len, _results,
        _this = this;
      links = this.node.find("a");
      if (!links.length) {
        return;
      }
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        _results.push($(link).mousedown(function(evt) {
          return _this.linkCallback($(evt.target));
        }));
      }
      return _results;
    };

    CodeNodeFunction.prototype.restore = function() {
      if (this.originalText) {
        this.node.empty();
        return this.node.text(this.originalText);
      }
    };

    return CodeNodeFunction;

  })();

  SlideDeck = (function() {

    function SlideDeck() {
      var _this = this;
      if (!this.slideSource()[0]) {
        return;
      }
      this.slideContainer = new SlideContainer(function(disp) {
        return _this.containerCallback(disp);
      }, function(evt) {
        return _this.keypress(evt);
      });
      this.slidesButton = new SlidesButton(function() {
        return _this.show();
      });
      this.createDeck();
      $(document).on("mathjaxPreConfig", function() {
        return window.MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
          return _this.createDeck();
        });
      });
    }

    SlideDeck.prototype.slideSource = function() {
      return $(".pz_slide");
    };

    SlideDeck.prototype.createDeck = function() {
      var current, img, name, slide, source, txt, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      current = this.slide ? this.slide.ref : this.first;
      if (this.slides != null) {
        _ref = this.slides;
        for (name in _ref) {
          slide = _ref[name];
          slide.remove();
        }
      }
      this.slides = {};
      this.slide = null;
      this.first = null;
      Slide.lastCreated = null;
      _ref1 = this.slideSource();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        source = _ref1[_i];
        this.createSlide($(source));
      }
      _ref2 = $(".pz_slide_link");
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        txt = _ref2[_j];
        this.assignLink($(txt));
      }
      _ref3 = $(".pz_section");
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        txt = _ref3[_k];
        this.assignLink($(txt));
      }
      _ref4 = $("pzthumb");
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        img = _ref4[_l];
        this.assignLink($(img));
      }
      _ref5 = $("pzimg");
      for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
        img = _ref5[_m];
        this.assignCodeLink($(img));
      }
      if (this.navButtons != null) {
        this.navButtons.remove();
      }
      if (this.slideSource().length > 1) {
        this.navButtons = new NavButtons(this.slideContainer.div, (function(to) {
          return _this.go(to);
        }));
      }
      this.slidesButton.show();
      this.numSlides = Object.keys(this.slides).length;
      if (this.slideContainer.displayed) {
        return this.showSlide(current);
      }
    };

    SlideDeck.prototype.createSlide = function(source) {
      var id, section,
        _this = this;
      id = source.attr("id");
      section = source.attr("section");
      if (!this.first) {
        this.first = id;
      }
      return this.slides[id] = new Slide(this.slideContainer.div, id, section, Slide.lastCreated, (function(nodes) {}));
    };

    SlideDeck.prototype.assignLink = function(t) {
      var ref, tClass,
        _this = this;
      ref = t.attr("ref");
      if (!ref || !this.slides[ref]) {
        return;
      }
      this.slides[ref].addLink(t);
      t.unbind("click");
      t.click(function() {
        var currentRef;
        if (_this.slide) {
          currentRef = _this.slide.ref;
        }
        if (ref === currentRef) {
          return _this.slideContainer.toggle();
        } else {
          return _this.showSlide(ref);
        }
      });
      tClass = t.attr("class");
      if (tClass === "pz_slide_link" || tClass === "pz_section") {
        return t.attr("title", "Click to see slide");
      }
    };

    SlideDeck.prototype.assignCodeLink = function(img) {
      var codeIds,
        _this = this;
      codeIds = img.attr("codeids");
      if (!codeIds) {
        return;
      }
      img.unbind("click");
      return img.click(function() {
        var id, ids, t, _i, _len, _results;
        ids = codeIds.split(",");
        _results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          t = $.trim(id);
          _results.push($pz.event.showCode.trigger({
            id: t
          }));
        }
        return _results;
      });
    };

    SlideDeck.prototype.show = function() {
      if (!this.slide) {
        return this.showSlide(this.first);
      } else {
        return this.slideContainer.toggle();
      }
    };

    SlideDeck.prototype.showSlide = function(ref) {
      if (!ref) {
        return;
      }
      if (this.slide) {
        this.slide.show(false);
      }
      this.slide = this.slides[ref] ? this.slides[ref] : this.slides[this.first];
      this.slide.show();
      if (this.navButtons) {
        this.navButtons.enable(this.slide.prev, this.slide.next);
        this.navButtons.setIndex(this.slide.index, this.numSlides);
      }
      return this.slideContainer.show();
    };

    SlideDeck.prototype.containerCallback = function(show) {
      if (show == null) {
        show = true;
      }
      if (this.slide) {
        this.slide.highlightLinks(show);
      }
      if (this.slidesButton) {
        return this.slidesButton.highlight(show);
      }
    };

    SlideDeck.prototype.keypress = function(evt) {
      var disp, f, k, key, keys,
        _this = this;
      key = evt.keyCode;
      disp = this.slideContainer.displayed;
      keys = {
        27: function() {
          return _this.show();
        }
      };
      if (disp) {
        keys[36] = function() {
          return _this.showSlide(_this.first);
        };
        keys[37] = function() {
          return _this.go("prev");
        };
        keys[39] = function() {
          return _this.go("next");
        };
      }
      for (k in keys) {
        f = keys[k];
        if (key === parseInt(k)) {
          evt.preventDefault();
          f();
        }
      }
      if (disp && key === 13 && (this.slide.section != null)) {
        if (window.location.hash === "#" + this.slide.section) {
          window.location.hash = "";
        }
        return window.location.hash = this.slide.section;
      }
    };

    SlideDeck.prototype.go = function(to) {
      var slide;
      slide = this.slide[to];
      if (slide) {
        return this.showSlide(slide.ref);
      }
    };

    return SlideDeck;

  })();

  SlideContainer = (function() {

    function SlideContainer(displayCallback, keyCallback) {
      var css, parent,
        _this = this;
      this.displayCallback = displayCallback;
      this.keyCallback = keyCallback;
      css = {
        position: "fixed",
        zIndex: 10,
        overflow: "visible",
        width: "760px",
        height: "500px",
        bottom: 40,
        left: "50%",
        margin: 0,
        marginLeft: -380,
        background: "#fff",
        opacity: 0.95,
        padding: "10px",
        border: "2px solid gray",
        borderRadius: "8px",
        boxShadow: "5px 5px 8px #888888"
      };
      parent = $("#blab_container");
      this.div = $("<div>", {
        css: css,
        id: "pz_slide_deck"
      });
      this.div.draggable();
      parent.append(this.div);
      this.div.click((function() {
        return $(document.activeElement).blur();
      }));
      $(document.body).keydown(function(evt) {
        return _this.keyCallback(evt);
      });
      if (false) {
        this.codeNodesButton = new ImageButton(this.div, "UI_117.png", {
          right: "40px"
        }, (function() {
          return _this.showCode();
        }));
        this.codeNodesButton.button.attr("title", "Show/hide code that generated figures in this slide.");
      }
      new ImageButton(this.div, "UI_175.png", {
        right: "10px"
      }, (function() {
        return _this.show(false);
      }));
      this.show(false);
    }

    SlideContainer.prototype.show = function(show) {
      var disp, doc;
      if (show == null) {
        show = true;
      }
      disp = {
        display: show ? "inline" : "none"
      };
      this.div.css(disp);
      this.displayCallback(show);
      this.displayed = show;
      if (show && !this.gray) {
        doc = $(document);
        this.gray = $("<div>", {
          "class": "ui-widget-overlay",
          css: {
            width: $(document.body).width(),
            height: $(document).height(),
            zIndex: 9,
            pointerEvents: "none"
          }
        });
        $(document.body).append(this.gray);
      }
      if (!show && this.gray) {
        this.gray.remove();
        return this.gray = null;
      }
    };

    SlideContainer.prototype.toggle = function() {
      return this.show(!this.displayed);
    };

    SlideContainer.prototype.append = function(obj) {
      return this.div.append(obj);
    };

    SlideContainer.prototype.setCodeNodes = function(nodes) {
      var id, ids;
      this.codeNodes = [];
      this.codeNodesButton.show(nodes != null);
      if (!(nodes != null)) {
        return;
      }
      ids = nodes.split(",");
      this.codeNodes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          _results.push($.trim(id));
        }
        return _results;
      })();
      return this.codeNodesButton.button.css({
        opacity: this.codeDisplayed() ? 1 : 0.6
      });
    };

    SlideContainer.prototype.showCode = function() {
      var ace, id, show, _i, _len, _ref;
      if (this.codeNodes.length === 0) {
        return;
      }
      show = !this.codeDisplayed();
      _ref = this.codeNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        $.event.trigger("showCode", {
          id: id,
          show: show
        });
      }
      ace = $("#ace_editor_" + this.codeNodes[0]);
      this.codeNodesButton.button.css({
        opacity: this.codeDisplayed() ? 1 : 0.6
      });
      if (ace.parent().css("display") === "none") {
        return;
      }
      return $(document.body).animate({
        scrollTop: ace.offset().top
      }, 500);
    };

    SlideContainer.prototype.codeDisplayed = function() {
      var ace;
      if (this.codeNodes.length === 0) {
        return false;
      }
      ace = $("#ace_editor_" + this.codeNodes[0]);
      return ace.parent().css("display") !== "none";
    };

    return SlideContainer;

  })();

  SlidesButton = (function() {

    function SlidesButton(callback) {
      var parent,
        _this = this;
      this.callback = callback;
      if (!$(".pz_slide")) {
        return;
      }
      parent = $("#blab_container");
      this.div = $("<div>", {
        css: {
          position: "fixed",
          zIndex: 9,
          bottom: "30px",
          right: 20,
          height: "50px"
        }
      });
      this.img = $("<img>", {
        src: "http://puzlet.org/puzlet/images/UI_302.png",
        height: 25,
        css: {
          cursor: "pointer"
        },
        title: "Show/hide slides",
        click: function() {
          return _this.callback();
        }
      });
      this.div.append(this.img);
      parent.append(this.div);
      this.show(false);
      this.highlight(false);
    }

    SlidesButton.prototype.show = function(show) {
      if (show == null) {
        show = true;
      }
      return this.img.css({
        display: show ? "inline" : "none"
      });
    };

    SlidesButton.prototype.highlight = function(highlight) {
      if (highlight == null) {
        highlight = true;
      }
      return this.img.css({
        opacity: highlight ? 1 : 0.3
      });
    };

    return SlidesButton;

  })();

  Slide = (function() {

    Slide.lastCreated = null;

    function Slide(container, ref, section, prev, codeNodesCallback) {
      var source;
      this.container = container;
      this.ref = ref;
      this.section = section;
      this.prev = prev;
      this.codeNodesCallback = codeNodesCallback;
      source = $("#" + this.ref);
      this.div = $("<div>", {
        html: source.html()
      });
      this.div.attr("class", "pz_slide_clone");
      this.codeNodes = source.attr("codenodes");
      this.links = [];
      this.index = 1 + (Slide.lastCreated ? Slide.lastCreated.index : 0);
      this.next = null;
      if (this.prev) {
        this.prev.next = this;
      }
      this.container.append(this.div);
      this.show(false);
      Slide.lastCreated = this;
    }

    Slide.prototype.addLink = function(link) {
      return this.links.push(link);
    };

    Slide.prototype.show = function(show) {
      if (show == null) {
        show = true;
      }
      this.div.css({
        display: (show ? "inline" : "none")
      });
      this.highlightLinks(show);
      return this.codeNodesCallback(this.codeNodes);
    };

    Slide.prototype.highlightLinks = function(highlight) {
      var link, _i, _len, _ref, _results;
      if (highlight == null) {
        highlight = true;
      }
      _ref = this.links;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        _results.push(link.css({
          background: (highlight ? "#F3F781" : "white")
        }));
      }
      return _results;
    };

    Slide.prototype.remove = function() {
      return this.div.remove();
    };

    return Slide;

  })();

  NavButtons = (function() {

    function NavButtons(container, goto) {
      var navPos,
        _this = this;
      this.container = container;
      this.goto = goto;
      this.index = new SlideIndex(this.container, {
        bottom: "42px",
        right: "20px",
        width: "50px"
      });
      navPos = function(right) {
        return {
          bottom: "20px",
          right: right
        };
      };
      this.prev = new ImageButton(this.container, "UI_36.png", navPos("50px"), (function() {
        return _this.goto("prev");
      }));
      this.next = new ImageButton(this.container, "UI_37.png", navPos("20px"), (function() {
        return _this.goto("next");
      }));
    }

    NavButtons.prototype.enable = function(enablePrev, enableNext) {
      this.prev.enable(enablePrev);
      return this.next.enable(enableNext);
    };

    NavButtons.prototype.setIndex = function(idx, total) {
      return this.index.set(idx, total);
    };

    NavButtons.prototype.remove = function() {
      this.index.remove();
      this.prev.remove();
      return this.next.remove();
    };

    return NavButtons;

  })();

  Button = (function() {

    function Button(container, label, css, callback) {
      var _this = this;
      this.container = container;
      this.label = label;
      this.callback = callback;
      this.button = $("<span>", {
        text: this.label,
        css: {
          position: "absolute",
          zIndex: 11
        },
        click: function() {
          if (_this.enabled) {
            return _this.callback();
          }
        }
      });
      if (css) {
        this.button.css(css);
      }
      this.enable(true);
      this.container.append(this.button);
    }

    Button.prototype.enable = function(enable) {
      this.button.css({
        color: enable ? "black" : "#bbb",
        cursor: enable ? "pointer" : "default"
      });
      return this.enabled = enable;
    };

    return Button;

  })();

  ImageButton = (function() {

    function ImageButton(container, src, css, callback) {
      var _this = this;
      this.container = container;
      this.src = src;
      this.callback = callback;
      this.button = $("<img>", {
        src: "http://puzlet.org/puzlet/images/" + this.src,
        height: 20,
        width: 20,
        css: {
          position: "absolute",
          zIndex: 11,
          cursor: "pointer"
        },
        click: function() {
          return _this.callback();
        }
      });
      if (css) {
        this.button.css(css);
      }
      this.enable(true);
      this.container.append(this.button);
    }

    ImageButton.prototype.show = function(show) {
      if (show == null) {
        show = true;
      }
      return this.button.css({
        display: show ? "inline" : "none"
      });
    };

    ImageButton.prototype.enable = function(enable) {
      this.button.css({
        opacity: enable ? 1 : 0.3,
        cursor: enable ? "pointer" : "default"
      });
      return this.enabled = enable;
    };

    ImageButton.prototype.remove = function() {
      return this.button.remove();
    };

    return ImageButton;

  })();

  SlideIndex = (function() {

    function SlideIndex(container, css) {
      this.container = container;
      this.div = $("<div>", {
        css: {
          display: "block",
          position: "absolute",
          zIndex: 11,
          textAlign: "center",
          fontSize: "8pt",
          color: "#aaa"
        }
      });
      if (css) {
        this.div.css(css);
      }
      this.container.append(this.div);
    }

    SlideIndex.prototype.set = function(index, of) {
      this.index = index;
      this.of = of;
      return this.div.html("" + this.index + " of " + this.of);
    };

    SlideIndex.prototype.remove = function() {
      return this.div.remove();
    };

    return SlideIndex;

  })();

  Blab = (function() {

    function Blab() {
      var ready, render,
        _this = this;
      this.publicInterface();
      this.location = new ResourceLocation;
      window.blabBasic = (window.blabBasic != null) && window.blabBasic;
      this.page = window.blabBasic ? new BasicPage(this.location) : new Page(this.location);
      render = function(wikyHtml) {
        return _this.page.render(wikyHtml);
      };
      ready = function() {
        return _this.page.ready(_this.loader.resources);
      };
      this.loader = new Loader(this.location, render, ready);
      $pz.renderHtml = function() {
        return _this.page.rerender();
      };
    }

    Blab.prototype.publicInterface = function() {
      window.$pz = {};
      window.$blab = {};
      if (window.console == null) {
        window.console = {};
      }
      if (window.console.log == null) {
        window.console.log = (function() {});
      }
      $pz.AceIdentifiers = Ace.Identifiers;
      return $blab.codeDecoration = true;
    };

    return Blab;

  })();

  Loader = (function() {
    /*
    	[
    		"main.html",
    		"style.css",
    		"bar.js",
    		"foo.coffee",
    		"main.coffee",
    		"/some-repo/snippet.html",
    		"/other-repo/foo.css",
    		"/puzlet/js/d3.min.js",
    		"http://domain.com/script.js",
    		"/ode-fixed/ode.coffee"
    	]
    */

    Loader.prototype.coreResources = [
      {
        url: "http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js",
        "var": "jQuery"
      }, {
        url: "/puzlet/js/google_analytics.js"
      }, {
        url: "http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/themes/smoothness/jquery-ui.css",
        "var": "jQuery"
      }, {
        url: "/puzlet/js/wiky.js",
        "var": "Wiky"
      }
    ];

    Loader.prototype.resourcesList = {
      url: "resources.json"
    };

    Loader.prototype.htmlResources = window.blabBasic ? [
      {
        url: ""
      }
    ] : [
      {
        url: "/puzlet/css/coffeelab.css"
      }
    ];

    Loader.prototype.scriptResources = [
      {
        url: "/puzlet/js/coffeescript.js"
      }, {
        url: "/puzlet/js/acorn.js"
      }, {
        url: "/puzlet/js/numeric-1.2.6.js"
      }, {
        url: "/puzlet/js/jquery.flot.min.js"
      }, {
        url: "/puzlet/js/compile.js"
      }, {
        url: "/puzlet/js/jquery.cookie.js"
      }, {
        url: "http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js",
        "var": "jQuery.ui"
      }
    ];

    function Loader(blabLocation, render, done) {
      var _this = this;
      this.blabLocation = blabLocation;
      this.render = render;
      this.done = done;
      this.resources = new Resources(this.blabLocation);
      this.publicInterface();
      this.loadCoreResources(function() {
        return _this.loadGitHub(function() {
          return _this.loadResourceList(function() {
            return _this.loadHtmlCss(function() {
              return _this.loadScripts(function() {
                return _this.loadAce(function() {
                  return _this.done();
                });
              });
            });
          });
        });
      });
    }

    Loader.prototype.loadCoreResources = function(callback) {
      var _this = this;
      this.resources.add(this.coreResources);
      return this.resources.loadUnloaded(function() {
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadGitHub = function(callback) {
      this.github = new GitHub(this.resources);
      return this.github.loadGist(callback);
    };

    Loader.prototype.loadResourceList = function(callback) {
      var list,
        _this = this;
      list = this.resources.add(this.resourcesList);
      return this.resources.loadUnloaded(function() {
        var listResources, r, spec, _i, _len;
        _this.resources.add(_this.htmlResources);
        _this.resources.add(_this.scriptResources);
        listResources = JSON.parse(list.content);
        for (_i = 0, _len = listResources.length; _i < _len; _i++) {
          r = listResources[_i];
          spec = typeof r === "string" ? {
            url: r
          } : r;
          _this.resources.add(spec);
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadHtmlCss = function(callback) {
      var _this = this;
      return this.resources.load(["html", "css"], function() {
        var html, _i, _len, _ref;
        _ref = _this.resources.select("html");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          html = _ref[_i];
          _this.render(html.content);
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadScripts = function(callback) {
      var _this = this;
      return this.resources.load(["json", "js", "coffee", "py", "m", "svg", "txt"], function() {
        _this.compileCoffee(function(coffee) {
          return !coffee.hasEval();
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadAce = function(callback) {
      var load,
        _this = this;
      load = function(resources, callback) {
        _this.resources.add(resources);
        return _this.resources.load(["js", "css"], function() {
          return typeof callback === "function" ? callback() : void 0;
        });
      };
      return new Ace.Resources(load, function() {
        _this.resources.render();
        _this.compileCoffee(function(coffee) {
          return coffee.hasEval();
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.compileCoffee = function(coffeeFilter) {
      var coffee, filter, _i, _len, _ref, _results;
      filter = function(resource) {
        return resource.isType("coffee") && coffeeFilter(resource);
      };
      _ref = this.resources.select(filter);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coffee = _ref[_i];
        _results.push(coffee.compile());
      }
      return _results;
    };

    Loader.prototype.publicInterface = function() {
      var _this = this;
      $blab.resources = this.resources;
      $blab.loadJSON = function(url, callback) {
        return _this.resources.loadJSON(url, callback);
      };
      return $blab.resource = function(id) {
        return _this.resources.getContent(id);
      };
    };

    return Loader;

  })();

  BasicPage = (function() {

    function BasicPage(blabLocation) {
      this.blabLocation = blabLocation;
      this.doneFirstHtml = false;
    }

    BasicPage.prototype.render = function(wikyHtml) {
      console.log("render");
      this.mainContainer();
      if (!this.doneFirstHtml) {
        new PageTitle;
      }
      return this.doneFirstHtml = true;
    };

    BasicPage.prototype.ready = function(resources) {
      this.resources = resources;
      console.log("ready");
      new ResourceImages(this.resources);
      new ThumbImages;
      new SlideDeck;
      new MathJaxProcessor;
      new Notes;
      new FavIcon;
      new GoogleAnalytics;
      return this.scrollToHashSection();
    };

    BasicPage.prototype.rerender = function() {
      var html, resource, _i, _j, _len, _len1, _ref, _ref1;
      this.empty();
      this.doneFirstHtml = false;
      _ref = this.resources.select("html");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        html = _ref[_i];
        this.render(html.content);
      }
      this.resources.render();
      _ref1 = this.resources.select("coffee");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        resource = _ref1[_j];
        resource.compile();
      }
      return $.event.trigger("htmlOutputUpdated");
    };

    BasicPage.prototype.mainContainer = function() {
      return this.container = $("#container");
    };

    BasicPage.prototype.empty = function() {
      return this.container.empty();
    };

    BasicPage.prototype.scrollToHashSection = function() {
      var hash, section;
      hash = window.location.hash;
      if (!hash) {
        return;
      }
      section = $("#" + hash.slice(1));
      if (!section.length) {
        return;
      }
      return $(document.body).animate({
        scrollTop: section.offset().top
      }, 0);
    };

    return BasicPage;

  })();

  Page = (function() {

    function Page(blabLocation) {
      this.blabLocation = blabLocation;
      this.doneFirstHtml = false;
    }

    Page.prototype.render = function(wikyHtml) {
      console.log("render");
      this.mainContainer();
      this.container.append(Wiky.toHtml(wikyHtml));
      if (!this.doneFirstHtml) {
        new PageTitle;
      }
      return this.doneFirstHtml = true;
    };

    Page.prototype.ready = function(resources) {
      this.resources = resources;
      console.log("ready");
      new ResourceImages(this.resources);
      new ThumbImages;
      new SlideDeck;
      new MathJaxProcessor;
      new Notes;
      new FavIcon;
      new GithubRibbon(this.container, this.blabLocation);
      new SaveButton(this.container, function() {
        return $.event.trigger("saveGitHub");
      });
      new GoogleAnalytics;
      return this.scrollToHashSection();
    };

    Page.prototype.rerender = function() {
      var html, resource, _i, _j, _len, _len1, _ref, _ref1;
      this.empty();
      this.doneFirstHtml = false;
      _ref = this.resources.select("html");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        html = _ref[_i];
        this.render(html.content);
      }
      this.resources.render();
      _ref1 = this.resources.select("coffee");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        resource = _ref1[_j];
        resource.compile();
      }
      return $.event.trigger("htmlOutputUpdated");
    };

    Page.prototype.mainContainer = function() {
      if (this.container != null) {
        return;
      }
      this.container = $("#blab_container");
      if (!this.container.length) {
        this.container = $("<div>", {
          id: "blab_container"
        });
        return $(document.body).append(this.container);
      }
    };

    Page.prototype.empty = function() {
      return this.container.empty();
    };

    Page.prototype.scrollToHashSection = function() {
      var hash, section;
      hash = window.location.hash;
      if (!hash) {
        return;
      }
      section = $("#" + hash.slice(1));
      if (!section.length) {
        return;
      }
      return $(document.body).animate({
        scrollTop: section.offset().top
      }, 0);
    };

    return Page;

  })();

  FavIcon = (function() {

    function FavIcon() {
      var icon;
      icon = $("<link>", {
        rel: "icon",
        type: "image/png",
        href: "http://puzlet.org/puzlet/images/favicon.ico"
      });
      $(document.head).append(icon);
    }

    return FavIcon;

  })();

  PageTitle = (function() {

    function PageTitle() {
      var headings;
      headings = $(":header");
      if (!headings.length) {
        return;
      }
      $blab.title = headings[0].innerHTML;
      document.title = $blab.title;
    }

    return PageTitle;

  })();

  GithubRibbon = (function() {

    function GithubRibbon(container, location) {
      var html, s, src,
        _this = this;
      this.container = container;
      this.location = location;
      if ($blab.noGitHubRibbon) {
        return;
      }
      if (this.location.host === "localhost") {
        s = this.location.path.split("/");
        this.link = "http://github.com/" + s[1].split(".")[0] + "/" + s[2];
      } else {
        s = this.location.url.split("/");
        this.link = "http://github.com/" + s[2].split(".")[0] + "/" + s[3];
      }
      src = "https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67";
      html = "<a href=\"" + this.link + "\" id=\"ribbon\" style=\"opacity:0.2\">\n<img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"" + src + "\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\"></a>";
      this.container.append(html);
      this.ribbon = $("#ribbon");
      setTimeout((function() {
        return _this.ribbon.fadeTo(400, 1).fadeTo(400, 0.2);
      }), 2000);
      $(document).on("codeNodeChanged", function() {
        return _this.ribbon.hide();
      });
      $(document).on("codeSaved", function() {
        return _this.ribbon.show();
      });
    }

    return GithubRibbon;

  })();

  MathJaxProcessor = (function() {

    MathJaxProcessor.prototype.source = "http://cdn.mathjax.org/mathjax/2.4-latest/MathJax.js?config=default";

    MathJaxProcessor.prototype.mode = "HTML-CSS";

    function MathJaxProcessor() {
      var configScript, container, hasBodyContainer, mathjax,
        _this = this;
      container = $("#container");
      hasBodyContainer = container.length && container.parent().is("body");
      this.outputId = hasBodyContainer ? "container" : "blab_container";
      $blab.mathjaxConfig = function() {
        $.event.trigger("mathjaxPreConfig");
        window.MathJax.Hub.Config({
          jax: ["input/TeX", "output/" + _this.mode],
          tex2jax: {
            inlineMath: [["$", "$"], ["\\(", "\\)"]],
            ignoreClass: "tex2jax_ignore"
          },
          TeX: {
            equationNumbers: {
              autoNumber: "AMS"
            }
          },
          elements: [_this.outputId, "blab_refs"],
          showProcessingMessages: false,
          MathMenu: {
            showRenderer: true
          }
        });
        return window.MathJax.HTML.Cookie.Set("menu", {
          renderer: _this.mode
        });
      };
      configScript = $("<script>", {
        type: "text/x-mathjax-config",
        text: "$blab.mathjaxConfig();"
      });
      mathjax = $("<script>", {
        type: "text/javascript",
        src: this.source
      });
      $("head").append(configScript).append(mathjax);
      $(document).on("htmlOutputUpdated", function() {
        return _this.process();
      });
    }

    MathJaxProcessor.prototype.process = function() {
      var Hub, configElements, queue,
        _this = this;
      if (typeof MathJax === "undefined" || MathJax === null) {
        return;
      }
      this.id = this.outputId;
      Hub = MathJax.Hub;
      queue = function(x) {
        return Hub.Queue(x);
      };
      queue(["PreProcess", Hub, this.id]);
      queue(["Process", Hub, this.id]);
      configElements = function() {
        return Hub.config.elements = [_this.id];
      };
      return queue(configElements);
    };

    return MathJaxProcessor;

  })();

  GoogleAnalytics = (function() {

    function GoogleAnalytics() {
      var _this = this;
      this.codeChanged = false;
      this.title = $blab.title;
      this.track("codeNodeChanged", "edit", "firstEdit", this.title, (function() {
        return !_this.codeChanged;
      }), (function() {
        return _this.codeChanged = true;
      }));
      this.track("runCode", "runCode", "run", this.title);
    }

    GoogleAnalytics.prototype.track = function(pzEvent, gCat, gEvent, gText, condition, callback) {
      var _this = this;
      if (condition == null) {
        condition = (function() {
          return true;
        });
      }
      return $(document).on(pzEvent, function() {
        if (condition()) {
          if (typeof _gaq !== "undefined" && _gaq !== null) {
            _gaq.push(["_trackEvent", gCat, gEvent, gText]);
          }
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    return GoogleAnalytics;

  })();

  Notes = (function() {

    function Notes() {
      var _this = this;
      this.initTooltip();
      this.processText(function(t) {
        return _this.init(t);
      });
      $(document).on("mathjaxPreConfig", function() {
        MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
          return _this.processText(function(t) {
            return _this.set(t);
          });
        });
        return MathJax.Hub.Register.MessageHook("End Process", function() {
          return _this.processText(function(t) {
            return _this.set(t);
          });
        });
      });
      $(document).on("htmlOutputUpdated", function() {
        return _this.processText(function(t) {
          return _this.init(t);
        });
      });
      $(document).tooltip({
        css: {
          fontSize: "10pt"
        }
      });
    }

    Notes.prototype.initTooltip = function() {
      return $pz.persistentTooltip = function(widget) {
        var clear, delay, set, tId;
        delay = 100;
        tId = null;
        clear = function() {
          if (tId) {
            return clearTimeout(tId);
          }
        };
        set = function() {
          clear();
          return tId = setTimeout((function() {
            return widget.tooltip("close");
          }), delay);
        };
        widget.tooltip();
        widget.on("tooltipopen", function(event, ui) {
          var setClose;
          setClose = function() {
            var tip, tipId;
            tipId = widget.attr("aria-describedBy");
            tip = $("#" + tipId);
            return tip.on("click", (function() {
              return widget.tooltip("close");
            }));
          };
          return setTimeout(setClose, 100);
        });
        widget.mouseenter((function(evt) {
          return clear();
        }));
        return widget.mouseleave((function(evt) {
          var tip, tipId;
          evt.stopImmediatePropagation();
          set();
          tipId = widget.attr("aria-describedBy");
          tip = $("#" + tipId);
          tip.on("mouseenter", (function() {
            return clear();
          }));
          return tip.on("mouseleave", (function() {
            return set();
          }));
        }));
      };
    };

    Notes.prototype.processText = function(method) {
      var txt, _i, _len, _ref, _results;
      _ref = $(".pz_text");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        txt = _ref[_i];
        _results.push(method($(txt)));
      }
      return _results;
    };

    Notes.prototype.init = function(t) {
      if (t.attr("title") != null) {
        t.removeAttr("title");
        t.tooltip();
        t.tooltip("destroy");
      }
      $pz.persistentTooltip(t);
      return t.attr({
        title: this.html(t)
      });
    };

    Notes.prototype.set = function(t) {
      if (!t.data("tooltipset")) {
        $pz.persistentTooltip(t);
      }
      return t.tooltip("option", "content", this.html(t));
    };

    Notes.prototype.html = function(t) {
      var ref;
      ref = t.attr("ref");
      return $("#" + ref).html();
    };

    return Notes;

  })();

  OpenInTab = (function() {

    function OpenInTab() {
      var _this = this;
      this.linkedTab = null;
      window.openInTab = function(id, section) {
        if (!_this.linkedTab || _this.linkedTab.closed) {
          return _this.linkedTab = window.open("?id=" + id + "#" + section, "_blank");
        } else {
          _this.linkedTab.focus();
          return _this.linkedTab.location.hash = "#" + section;
        }
      };
    }

    return OpenInTab;

  })();

  ResourceImages = (function() {

    function ResourceImages(resources) {
      var $img, img, r, _i, _len, _ref;
      this.resources = resources;
      _ref = $("img[data-src]");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        $img = $(img);
        r = this.resources.select(function(resource) {
          return resource.url === $img.data("src");
        });
        $img.attr({
          src: "data:image/svg+xml;charset=utf-8," + r[0].content
        });
      }
    }

    return ResourceImages;

  })();

  ThumbImages = (function() {

    function ThumbImages() {
      var img, _i, _len, _ref;
      _ref = $("pzthumb");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        this.processThumb($(img));
      }
    }

    ThumbImages.prototype.processThumb = function(img) {
      var i;
      i = this.processImg(img);
      if (!i) {
        return;
      }
      i.attr("title", "Click to see slide");
      i.css({
        float: "right",
        cursor: "pointer",
        backgroundImage: "url('http://puzlet.org/puzlet/images/UI_171.png')",
        backgroundRepeat: "no-repeat",
        backgroundPosition: "right top",
        backgroundSize: "20px 20px"
      });
      return i.attr("height", "250");
    };

    ThumbImages.prototype.processImg = function(img) {
      var attr, i, name, val, _i, _len, _ref;
      i = $("<img>");
      _ref = img[0].attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        name = attr.name;
        val = attr.value;
        i.attr(name, val);
      }
      img.append(i);
      return i;
    };

    return ThumbImages;

  })();

  new Blab;

}).call(this);
