// Generated by CoffeeScript 1.7.1
(function() {
  var MathJaxProcessor, Notes, _ref;

  if (typeof $blab !== "undefined" && $blab !== null) {
    if ((_ref = $blab.resources) != null) {
      _ref.on("ready", function() {
        new MathJaxProcessor;
        return new Notes;
      });
    }
  }

  MathJaxProcessor = (function() {
    MathJaxProcessor.prototype.source = "http://cdn.mathjax.org/mathjax/2.4-latest/MathJax.js?config=default";

    MathJaxProcessor.prototype.mode = "HTML-CSS";

    function MathJaxProcessor() {
      var configScript, container, hasBodyContainer, mathjax;
      container = $("#container");
      hasBodyContainer = container.length && container.parent().is("body") || container.parent().attr("id") === "outer-container";
      this.outputId = hasBodyContainer ? "container" : "blab_container";
      $blab.mathjaxConfig = (function(_this) {
        return function() {
          $.event.trigger("mathjaxPreConfig");
          window.MathJax.Hub.Config({
            jax: ["input/TeX", "output/" + _this.mode],
            tex2jax: {
              inlineMath: [["$", "$"], ["\\(", "\\)"]],
              ignoreClass: "tex2jax_ignore"
            },
            TeX: {
              equationNumbers: {
                autoNumber: "AMS"
              }
            },
            elements: [_this.outputId, "blab_refs"],
            showProcessingMessages: false,
            MathMenu: {
              showRenderer: true
            }
          });
          return window.MathJax.HTML.Cookie.Set("menu", {
            renderer: _this.mode
          });
        };
      })(this);
      configScript = $("<script>", {
        type: "text/x-mathjax-config",
        text: "$blab.mathjaxConfig();"
      });
      mathjax = $("<script>", {
        type: "text/javascript",
        src: this.source
      });
      $("head").append(configScript).append(mathjax);
      $(document).on("htmlOutputUpdated", (function(_this) {
        return function() {
          return _this.process();
        };
      })(this));
    }

    MathJaxProcessor.prototype.process = function() {
      var Hub, configElements, queue;
      if (typeof MathJax === "undefined" || MathJax === null) {
        return;
      }
      this.id = this.outputId;
      Hub = MathJax.Hub;
      queue = function(x) {
        return Hub.Queue(x);
      };
      queue(["PreProcess", Hub, this.id]);
      queue(["Process", Hub, this.id]);
      configElements = (function(_this) {
        return function() {
          return Hub.config.elements = [_this.id];
        };
      })(this);
      return queue(configElements);
    };

    return MathJaxProcessor;

  })();

  Notes = (function() {
    function Notes() {
      if ($(document).tooltip == null) {
        return;
      }
      this.initTooltip();
      this.processText((function(_this) {
        return function(t) {
          return _this.init(t);
        };
      })(this));
      $(document).on("mathjaxPreConfig", (function(_this) {
        return function() {
          MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
            return _this.processText(function(t) {
              return _this.set(t);
            });
          });
          return MathJax.Hub.Register.MessageHook("End Process", function() {
            return _this.processText(function(t) {
              return _this.set(t);
            });
          });
        };
      })(this));
      $(document).on("htmlOutputUpdated", (function(_this) {
        return function() {
          return _this.processText(function(t) {
            return _this.init(t);
          });
        };
      })(this));
      $(document).tooltip({
        css: {
          fontSize: "10pt"
        }
      });
    }

    Notes.prototype.initTooltip = function() {
      return $pz.persistentTooltip = function(widget) {
        var clear, delay, set, tId;
        delay = 100;
        tId = null;
        clear = function() {
          if (tId) {
            return clearTimeout(tId);
          }
        };
        set = function() {
          clear();
          return tId = setTimeout((function() {
            return widget.tooltip("close");
          }), delay);
        };
        widget.tooltip();
        widget.on("tooltipopen", function(event, ui) {
          var setClose;
          setClose = function() {
            var tip, tipId;
            tipId = widget.attr("aria-describedBy");
            tip = $("#" + tipId);
            return tip.on("click", (function() {
              return widget.tooltip("close");
            }));
          };
          return setTimeout(setClose, 100);
        });
        widget.mouseenter((function(evt) {
          return clear();
        }));
        return widget.mouseleave((function(evt) {
          var tip, tipId;
          evt.stopImmediatePropagation();
          set();
          tipId = widget.attr("aria-describedBy");
          tip = $("#" + tipId);
          tip.on("mouseenter", (function() {
            return clear();
          }));
          return tip.on("mouseleave", (function() {
            return set();
          }));
        }));
      };
    };

    Notes.prototype.processText = function(method) {
      var txt, _i, _len, _ref1, _results;
      _ref1 = $(".pz_text");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        txt = _ref1[_i];
        _results.push(method($(txt)));
      }
      return _results;
    };

    Notes.prototype.init = function(t) {
      if (t.attr("title") != null) {
        t.removeAttr("title");
        t.tooltip();
        t.tooltip("destroy");
      }
      $pz.persistentTooltip(t);
      return t.attr({
        title: this.html(t)
      });
    };

    Notes.prototype.set = function(t) {
      if (!t.data("tooltipset")) {
        $pz.persistentTooltip(t);
      }
      return t.tooltip("option", "content", this.html(t));
    };

    Notes.prototype.html = function(t) {
      var ref;
      ref = t.attr("ref");
      return $("#" + ref).html();
    };

    return Notes;

  })();

}).call(this);
